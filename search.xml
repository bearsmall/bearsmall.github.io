<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[英汉对译 Real Time Communication With WebRTC 【Google codelabs】]]></title>
      <url>https://bearsmall.github.io/2017/02/06/rtc/2017-02-06-google-codelabs-webrtc/</url>
      <content type="html"><![CDATA[<h2 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h2><p><a href="https://codelabs.developers.google.com/codelabs/webrtc-web" target="_blank" rel="external">Real Time Communication with WebRTC</a>是Google codeLabs上一个学习WebRTC的初级教程，这里我利用课余时间对其进行了英译汉的翻译，介于英语能力有限，翻译不当之处在所难免。不当之处还请斧正。<br><a id="more"></a><br>为了保证不影响英语大神的阅读体验，翻译的时候是根据原文一段段翻译的（保留了英文原文），要是觉得译文有些地方看不懂，不要迟疑，直接看对应的英文吧╮(╯▽╰)╭</p>
<h1 id="Real-Time-Communication-with-WebRTC—-WebRTC即时通讯"><a href="#Real-Time-Communication-with-WebRTC—-WebRTC即时通讯" class="headerlink" title="Real Time Communication with WebRTC—-WebRTC即时通讯"></a><a href="https://codelabs.developers.google.com/codelabs/webrtc-web" target="_blank" rel="external">Real Time Communication with WebRTC</a>—-<a href="https://github.com/bearsmall/BlogSharing/tree/master/rtc/WebRTC/google-codelabs-webrtc" target="_blank" rel="external">WebRTC即时通讯</a></h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table>
<thead>
<tr>
<th style="text-align:center">章节</th>
<th style="text-align:center">英文原版</th>
<th style="text-align:center">英译汉对照版</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#0" target="_blank" rel="external">Introduction</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/1-Introduction.md" target="_blank" rel="external">简介</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#1" target="_blank" rel="external">Overview</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/2-Overview.md" target="_blank" rel="external">概述</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#2" target="_blank" rel="external">Get the sample code</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/3-Get-the-sample-code.md" target="_blank" rel="external">获取样例代码</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#3" target="_blank" rel="external">Stream video from your webcam</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/4-Stream-video-from-your-webcam.md" target="_blank" rel="external">从摄像头获取视频流</a></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#4" target="_blank" rel="external">Stream video with RTCPeerConnection</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/5-Stream-video-with-RTCPeerConnection.md" target="_blank" rel="external">RTCPeerConnection下的视频流</a></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#5" target="_blank" rel="external">Use RTCDataChannel to exchange data</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/6-Use-RTCDataChannel-to-exchange-data.md" target="_blank" rel="external">使用RTCDataChannel交换数据</a></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#6" target="_blank" rel="external">Set up a signaling service to exchange messages</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/7-Set-up-a-signaling-service-to-exchange-messages.md" target="_blank" rel="external">搭建一个信令服务器传递消息</a></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#7" target="_blank" rel="external">Combine peer connection and signaling</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/8-Combine-peer-connection-and-signaling.md" target="_blank" rel="external">整合peerConnection和信令</a></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#8" target="_blank" rel="external">Take a photo and share it via a data channel</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/9-Take-a-photo-and-share-it-via-a-data-channel.md" target="_blank" rel="external">拍一张照然后通过datachannel分享它</a></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center"><a href="https://codelabs.developers.google.com/codelabs/webrtc-web/#9" target="_blank" rel="external">Congratulations</a></td>
<td style="text-align:center"><a href="https://github.com/bearsmall/BlogSharing/blob/master/rtc/WebRTC/google-codelabs-webrtc/10-Congratulations.md" target="_blank" rel="external">祝贺</a></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2017阅读书单]]></title>
      <url>https://bearsmall.github.io/2017/01/24/book/2017-01-24-reading-books/</url>
      <content type="html"><![CDATA[<h2 id="SpringMVC学习指南"><a href="#SpringMVC学习指南" class="headerlink" title="SpringMVC学习指南"></a>SpringMVC学习指南</h2><a id="more"></a>
<p><img src="https://img1.doubanio.com/lpic/s28093807.jpg" alt="SpringMVC学习指南"></p>
<ul>
<li>status：已读</li>
<li>author：Paul Deck</li>
<li>publisher：人民邮电出版社</li>
<li>language：中文（林仪明 崔毅 译）</li>
<li>link：<a href="https://book.douban.com/subject/26411275/" target="_blank" rel="external">https://book.douban.com/subject/26411275/</a></li>
<li>evaluate：差评，不要买！！！</li>
</ul>
<h2 id="Spring-In-Action（第四版）"><a href="#Spring-In-Action（第四版）" class="headerlink" title="Spring In Action（第四版）"></a>Spring In Action（第四版）</h2><p><img src="https://img3.doubanio.com/lpic/s28607882.jpg" alt=" Spring In Action（第四版）"></p>
<ul>
<li>status：在读中</li>
<li>author：Craig Walls 沃尔斯</li>
<li>publisher：人民邮电出版社</li>
<li>language：中文（张卫滨 译）</li>
<li>link：<a href="https://book.douban.com/subject/26767354/" target="_blank" rel="external">https://book.douban.com/subject/26411275/</a></li>
<li>evaluate：好评！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给tomcat配java版本]]></title>
      <url>https://bearsmall.github.io/2017/01/01/javaweb/2017-01-01-tomcat-java-version/</url>
      <content type="html"><![CDATA[<h2 id="储备知识"><a href="#储备知识" class="headerlink" title="储备知识"></a>储备知识</h2><ul>
<li>当我们把javaweb项目部署到tomcat中时，一般来说是没有源文件的（.Java），而是只有类文件（.class）.tomcat是servlet容器，负责执行servlet。</li>
<li>众所周知：jsp实际上就是servlet。那么我们编写的jsp页面最终在访问的时候，都会预编译为Servlet（源文件和目标文件都有，work目录下）。</li>
<li>可以尝试：安装tomcat和jre（不是jdk）。竟然可以执行jsp页面，也就是说jsp到servlet的转化和servlet源文件到.class文件的编译在<a id="more"></a>
只有jre的情况下竟然完成了。所以可以断定，编译过程是tomcat内置&gt;的一个编译环境。那么这个编译级别是怎么样的呢？jdk1.6?还是jdk1.7?</li>
</ul>
<ul>
<li>我拿两个tomcat版本查看后发现（\conf\web.xml）：</li>
</ul>
<ol>
<li>tomcat7.*</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compilerSourceVM    Compiler source VM. [1.6]</div><div class="line">compilerTargetVM    Compiler target VM. [1.6]</div></pre></td></tr></table></figure>
<ol>
<li>tomcat8.*</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compilerSourceVM    Compiler source VM. [1.7]</div><div class="line">compilerTargetVM    Compiler target VM. [1.7]</div></pre></td></tr></table></figure>
<ul>
<li><p>稍微解释一下这两个参数：</p>
<ol>
<li>compilerSourceVM:编译源文件时采用那个JDK版本？（上面指出了缺省值）</li>
<li>compilerTargetVM:运行类文件时采用那个JDK版本？（上面给出了缺省值）</li>
</ol>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://zm8.sm-img2.com/?src=http%3A%2F%2Fyoyo.is-programmer.com%2Fposts%2F13166.html&amp;uid=2f5668707a1b02af6f519213098ab4f7&amp;hid=c045dc490621a3bd2fd665ff3f88c93e&amp;pos=5&amp;cid=9&amp;time=1455440494614&amp;from=click&amp;restype=1&amp;pagetype=0000004000000402&amp;bu=news_natural&amp;query=%E8%AE%BE%E7%BD%AEtomcat+jsp%E7%BC%96%E8%AF%91jdk%E7%89%88%E6%9C%AC&amp;mode=&amp;uc_param_str=dnntnwvepffrgibijbprsvpi" target="_blank" rel="external"></a></p>
<ul>
<li><p>既然jsp最后都是由tomcat版本决定编译和运行时采用的jdk版本。那么项目里的纯java代码呢？</p>
</li>
<li><p>这个就需要自己在外部编译好最好打包到tomcat中。编译的工具很多，比如ant，maven等等。</p>
</li>
</ul>
<h3 id="给tomcat配置jdk"><a href="#给tomcat配置jdk" class="headerlink" title="给tomcat配置jdk"></a>给tomcat配置jdk</h3><ul>
<li>我没有听错吧，tomcat还能配置jdk版本。除去tomcat编译jsp的那个配置不算。<br>我们一般都是先安装jdk，再安装tomcat。项目运行的时候，不就是采用的安装的<br>jdk的版本吗？</li>
<li>确实如此，不过我们还是可以配置的。一般像上面那样理解起来比较好，JDK和Tomcat单独安装，不需要怎么配置，java环境自然使用的是安装的jdk。</li>
<li>不过在我们开发的时候有时候就是会吃编译和运行版本的亏。<br>例如我们在myeclipse集成开发环境中一般会使用自己安装的jdk和tomcat。<br>我们也推荐这么做，但是大部分人都只是觉得自己是在用自己的jdk和tomcat，其实不然。</li>
<li>我们将自己的tomcat导入myeclipse中设置为enable，以为就万事大吉了。<br>但是我们其实还可以配置下面选项列表中的其它一些参数，比如说JDK。<br>点开一看大多数情况下会惊奇的发现使用的是myeclipse中默认的JDK，并不是我们安装的JDK。这种不了解有时候会造成一些看似诡异实则有因的问题。</li>
<li>好了我们配置好JDK就可以了【如果知道maven，我们其实还可以在maven中设置编译和运行环境，不需要在Tomcat上折腾】。</li>
<li>至于那个诡异的问题不是那么轻易就能碰到的，这里我人为搞一个。</li>
</ul>
<p>比如你Tomcat使用的JDK版本是1.7(运行)，然后你的项目编译环境是1.8的，你把编译好的项目放到Tomcat服务器上面，然后嗨嗨是不是一大堆找不到类啊？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Maven一次编译和部署环境不一致导致的问题]]></title>
      <url>https://bearsmall.github.io/2017/01/01/javaweb/2017-01-01-maven-compile-level/</url>
      <content type="html"><![CDATA[<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><ul>
<li>maven项目</li>
<li>SSH整合</li>
<li>单元测试没有问题，部署到Tomcat中报错</li>
<li>maven install成功!部署失败<a id="more"></a>
<h3 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">[com.alibaba.druid.pool.DruidDataSource]&#123;dataSource-1&#125; closed</div><div class="line">[org.springframework.web.context.ContextLoader]Context initialization failed</div><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sessionFactory&apos; defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: entity class not found: com.xy.model.RouteInfo</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)</div><div class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)</div><div class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:591)</div><div class="line">    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)</div><div class="line">    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469)</div><div class="line">    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383)</div><div class="line">    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)</div><div class="line">    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)</div><div class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5016)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5528)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)</div><div class="line">    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652)</div><div class="line">    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1258)</div><div class="line">    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1918)</div><div class="line">    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:262)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">    at java.lang.Thread.run(Thread.java:744)</div><div class="line">Caused by: org.hibernate.MappingException: entity class not found: com.xy.model.RouteInfo</div><div class="line">    at org.hibernate.mapping.PersistentClass.getMappedClass(PersistentClass.java:129)</div><div class="line">    at org.hibernate.tuple.PropertyFactory.getGetter(PropertyFactory.java:390)</div><div class="line">    at org.hibernate.tuple.PropertyFactory.buildIdentifierProperty(PropertyFactory.java:75)</div><div class="line">    at org.hibernate.tuple.entity.EntityMetamodel.&lt;init&gt;(EntityMetamodel.java:145)</div><div class="line">    at org.hibernate.persister.entity.AbstractEntityPersister.&lt;init&gt;(AbstractEntityPersister.java:505)</div><div class="line">    at org.hibernate.persister.entity.SingleTableEntityPersister.&lt;init&gt;(SingleTableEntityPersister.java:146)</div><div class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)</div><div class="line">    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</div><div class="line">    at org.hibernate.persister.internal.PersisterFactoryImpl.create(PersisterFactoryImpl.java:163)</div><div class="line">    at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:135)</div><div class="line">    at org.hibernate.internal.SessionFactoryImpl.&lt;init&gt;(SessionFactoryImpl.java:381)</div><div class="line">    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1750)</div><div class="line">    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1788)</div><div class="line">    at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:242)</div><div class="line">    at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:372)</div><div class="line">    at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:357)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)</div><div class="line">    ... 25 more</div><div class="line">Caused by: java.lang.ClassNotFoundException: com.xy.model.RouteInfo</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1720)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)</div><div class="line">    at java.lang.Class.forName0(Native Method)</div><div class="line">    at java.lang.Class.forName(Class.java:190)</div><div class="line">    at org.hibernate.internal.util.ReflectHelper.classForName(ReflectHelper.java:192)</div><div class="line">    at org.hibernate.mapping.PersistentClass.getMappedClass(PersistentClass.java:126)</div><div class="line">    ... 44 more</div><div class="line">二月 14, 2016 5:49:10 下午 org.apache.catalina.core.StandardContext listenerStart</div><div class="line">严重: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener</div><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sessionFactory&apos; defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.hibernate.MappingException: entity class not found: com.xy.model.RouteInfo</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)</div><div class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)</div><div class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)</div><div class="line">    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:591)</div><div class="line">    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)</div><div class="line">    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:469)</div><div class="line">    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:383)</div><div class="line">    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)</div><div class="line">    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)</div><div class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5016)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5528)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)</div><div class="line">    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:652)</div><div class="line">    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1258)</div><div class="line">    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1918)</div><div class="line">    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:262)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">    at java.lang.Thread.run(Thread.java:744)</div><div class="line">Caused by: org.hibernate.MappingException: entity class not found: com.xy.model.RouteInfo</div><div class="line">    at org.hibernate.mapping.PersistentClass.getMappedClass(PersistentClass.java:129)</div><div class="line">    at org.hibernate.tuple.PropertyFactory.getGetter(PropertyFactory.java:390)</div><div class="line">    at org.hibernate.tuple.PropertyFactory.buildIdentifierProperty(PropertyFactory.java:75)</div><div class="line">    at org.hibernate.tuple.entity.EntityMetamodel.&lt;init&gt;(EntityMetamodel.java:145)</div><div class="line">    at org.hibernate.persister.entity.AbstractEntityPersister.&lt;init&gt;(AbstractEntityPersister.java:505)</div><div class="line">    at org.hibernate.persister.entity.SingleTableEntityPersister.&lt;init&gt;(SingleTableEntityPersister.java:146)</div><div class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</div><div class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)</div><div class="line">    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</div><div class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)</div><div class="line">    at org.hibernate.persister.internal.PersisterFactoryImpl.create(PersisterFactoryImpl.java:163)</div><div class="line">    at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:135)</div><div class="line">    at org.hibernate.internal.SessionFactoryImpl.&lt;init&gt;(SessionFactoryImpl.java:381)</div><div class="line">    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1750)</div><div class="line">    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1788)</div><div class="line">    at org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:242)</div><div class="line">    at org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:372)</div><div class="line">    at org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:357)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)</div><div class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)</div><div class="line">    ... 25 more</div><div class="line">Caused by: java.lang.ClassNotFoundException: com.xy.model.RouteInfo</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1720)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)</div><div class="line">    at java.lang.Class.forName0(Native Method)</div><div class="line">    at java.lang.Class.forName(Class.java:190)</div><div class="line">    at org.hibernate.internal.util.ReflectHelper.classForName(ReflectHelper.java:192)</div><div class="line">    at org.hibernate.mapping.PersistentClass.getMappedClass(PersistentClass.java:126)</div><div class="line">    ... 44 more</div><div class="line">二月 14, 2016 5:49:10 下午 org.apache.catalina.core.StandardContext startInternal</div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>关键语句出现了多次：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.hibernate.MappingException: entity class not found: com.xy.model.RouteInfo</div></pre></td></tr></table></figure>
<ul>
<li>说RouteInfo类没有找到，但是我看了下源码确实有这个类啊。【非常重要的可疑点！！】</li>
</ul>
<h4 id="一般来说这种‘明明’有但是却说找不到的类的情况分三种："><a href="#一般来说这种‘明明’有但是却说找不到的类的情况分三种：" class="headerlink" title="一般来说这种‘明明’有但是却说找不到的类的情况分三种："></a>一般来说这种‘明明’有但是却说找不到的类的情况分三种：</h4><ol>
<li>确实找不到，因为你太粗心了，类名写错了。</li>
<li>有时候映射文件不是com.xy这种包路径，而是com/xy这种文件路径也是其中一个原因。</li>
<li>最惨的是编译版本和运行版本不匹配（即编译版本高于运行版本）</li>
</ol>
<h4 id="对应的解决方案如下："><a href="#对应的解决方案如下：" class="headerlink" title="对应的解决方案如下："></a>对应的解决方案如下：</h4><ol>
<li>修改类名</li>
<li>仔细查看配置文件，根据配置模板进行相应的修改</li>
<li><p>编译版本调整：</p>
<ul>
<li>如果不是maven项目，修改build path，compile level。</li>
<li>如果是maven项目，修改pom.xml，</li>
<li>下面是模板【当然也可以直接修改maven中的配置，起到全局效果】。</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[（id，pid）格式数据转树和森林结构工具类设计与实现]]></title>
      <url>https://bearsmall.github.io/2016/06/27/tool/2016-06-27-id-pid-tree/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>树形结构很多地方都有应用，比如我们在构造网站后台的授权限树的时候，再比如我们在设计多级留言的时候、还有分类等等。<br><a id="more"></a></p>
<ul>
<li>有些时候我们的树形结构并不需要过多设计，这是因为我们的很多时候对这棵树的要求不高（两层、三层就行了），这时候我们很容易的会按照层级划分树形结构，然后查询数据库的时候会一层一层的嵌套查询。</li>
<li>如果层次比较浅这种做法是可取的（或者我们本来就不打算一次将树加载完全，而是在需要时再加载，那分层级的多次加载也许有用武之地）。但是考虑这种情况：我们的树比较深，而且要一次加载完全。</li>
<li>要是按照一层一层的加载原则，那么光是访问数据库的查询语句就是指数形式的了。性能肯定不好。那么除了一层一层的查询好有更好的办法吗？肯定是有的，多查询一些资料会发现这种做法比较常见了：（id，pid）。</li>
<li>通俗说就是一个节点只需要记住自己的id和父亲的id（根节点没有pid可以设置一个特殊值）就可以拥有呈现这棵树的完整结构全部信息了，仔细想一想自己学过的数据结构，是不是这样的？</li>
<li>好了这样一来我们在设计数据库的时候就可以很轻松的设计一棵树的树形结构了。那么有个问题，我们在展现出来的时候总不能直接显示一连串的（id，pid）集合吧。我们要的是树形结构。</li>
<li>这时候我们其实非常想实现的是从（id，pid）到 （id，children【】）的转化。毕竟我们在展现树形结构的时候后一种格式更适合页面的呈现，而前一种比较适合数据的存储格式。</li>
</ul>
<h2 id="树形结构实现"><a href="#树形结构实现" class="headerlink" title="树形结构实现"></a>树形结构实现</h2><h3 id="自定义节点类"><a href="#自定义节点类" class="headerlink" title="自定义节点类"></a>自定义节点类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 节点类</div><div class="line"> * <span class="doctag">@author</span> bearsmall</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//主键ID</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pid;<span class="comment">//父节点ID</span></div><div class="line">    <span class="keyword">private</span> Object content;<span class="comment">//节点内容</span></div><div class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; children = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();<span class="comment">//子孙节点</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> id, Object content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> pid, Object content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.pid = pid;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pid;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(<span class="keyword">int</span> pid)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pid = pid;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> children;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List&lt;TreeNode&gt; children)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.children = children;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"TreeNode [id="</span> + id + <span class="string">", pid="</span> + pid + <span class="string">", content="</span> + content</div><div class="line">                + <span class="string">", children="</span> + children + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="树节点管理类"><a href="#树节点管理类" class="headerlink" title="树节点管理类"></a>树节点管理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 树节点管理类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> bearsmall</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; list;<span class="comment">// 树的所有节点</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNodeManager</span><span class="params">(TreeNode[] items)</span> </span>&#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : items) &#123;</div><div class="line">            list.add(treeNode);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNodeManager</span><span class="params">(List&lt;TreeNode&gt; items)</span> </span>&#123;</div><div class="line">        list = items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据节点ID获取一个节点</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     *            节点ID</div><div class="line">     * <span class="doctag">@return</span> 对应的节点对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getTreeNodeAT</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : list) &#123;</div><div class="line">            <span class="keyword">if</span> (treeNode.getId() == id)</div><div class="line">                <span class="keyword">return</span> treeNode;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取树的根节点</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 一棵树的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : list) &#123;</div><div class="line">            <span class="keyword">if</span> (treeNode.getPid() == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> treeNode;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="树节点转化类"><a href="#树节点转化类" class="headerlink" title="树节点转化类"></a>树节点转化类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 节点归并类</div><div class="line"> * <span class="doctag">@author</span> bearsmall</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNodeMerger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将节点数组归并为一棵树（填充节点的children域）</div><div class="line">     * 时间复杂度为O(n^2)</div><div class="line">     * <span class="doctag">@param</span> items 节点域</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">merge</span><span class="params">(TreeNode[] items)</span></span>&#123;</div><div class="line">        TreeNodeManager treeNodeManager = <span class="keyword">new</span> TreeNodeManager(items);</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : items) &#123;</div><div class="line">            <span class="keyword">if</span>(treeNode.getPid()!=<span class="number">0</span>)&#123;</div><div class="line">                TreeNode t = treeNodeManager.getTreeNodeAT(treeNode.getPid());</div><div class="line">                t.getChildren().add(treeNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> treeNodeManager.getRoot();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将节点数组归并为一棵树（填充节点的children域）</div><div class="line">     *  时间复杂度为O(n^2)</div><div class="line">     * <span class="doctag">@param</span> items 节点域</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">merge</span><span class="params">(List&lt;TreeNode&gt; items)</span></span>&#123;</div><div class="line">        TreeNodeManager treeNodeManager = <span class="keyword">new</span> TreeNodeManager(items);</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : items) &#123;</div><div class="line">            <span class="keyword">if</span>(treeNode.getPid()!=<span class="number">0</span>)&#123;</div><div class="line">                TreeNode t = treeNodeManager.getTreeNodeAT(treeNode.getPid());</div><div class="line">                t.getChildren().add(treeNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> treeNodeManager.getRoot();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TreeNode[] treeNodes = <span class="keyword">new</span> TreeNode[<span class="number">10</span>];</div><div class="line">        treeNodes[<span class="number">0</span>] = <span class="keyword">new</span> TreeNode(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">1</span>] = <span class="keyword">new</span> TreeNode(<span class="number">2</span>, <span class="number">1</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">2</span>] = <span class="keyword">new</span> TreeNode(<span class="number">3</span>, <span class="number">1</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">3</span>] = <span class="keyword">new</span> TreeNode(<span class="number">4</span>, <span class="number">2</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">4</span>] = <span class="keyword">new</span> TreeNode(<span class="number">5</span>, <span class="number">3</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">5</span>] = <span class="keyword">new</span> TreeNode(<span class="number">6</span>, <span class="number">4</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">6</span>] = <span class="keyword">new</span> TreeNode(<span class="number">7</span>, <span class="number">3</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">7</span>] = <span class="keyword">new</span> TreeNode(<span class="number">8</span>, <span class="number">5</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">8</span>] = <span class="keyword">new</span> TreeNode(<span class="number">9</span>, <span class="number">6</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">9</span>] = <span class="keyword">new</span> TreeNode(<span class="number">10</span>, <span class="number">9</span>, <span class="string">""</span>);</div><div class="line">        TreeNode treeNode = TreeNodeMerger.merge(treeNodes);</div><div class="line">        JSONArray jsonArray = JSONArray.fromObject(treeNode);</div><div class="line">        System.out.println(jsonArray);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">        <span class="attr">"children"</span> : [&#123;</div><div class="line">                <span class="attr">"children"</span> : [&#123;</div><div class="line">                        <span class="attr">"children"</span> : [&#123;</div><div class="line">                                <span class="attr">"children"</span> : [&#123;</div><div class="line">                                        <span class="attr">"children"</span> : [&#123;</div><div class="line">                                                <span class="attr">"children"</span> : [],</div><div class="line">                                                <span class="attr">"pid"</span> : <span class="number">9</span>,</div><div class="line">                                                <span class="attr">"id"</span> : <span class="number">10</span>,</div><div class="line">                                                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                                            &#125;</div><div class="line">                                        ],</div><div class="line">                                        <span class="attr">"pid"</span> : <span class="number">6</span>,</div><div class="line">                                        <span class="attr">"id"</span> : <span class="number">9</span>,</div><div class="line">                                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                                    &#125;</div><div class="line">                                ],</div><div class="line">                                <span class="attr">"pid"</span> : <span class="number">4</span>,</div><div class="line">                                <span class="attr">"id"</span> : <span class="number">6</span>,</div><div class="line">                                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                            &#125;</div><div class="line">                        ],</div><div class="line">                        <span class="attr">"pid"</span> : <span class="number">2</span>,</div><div class="line">                        <span class="attr">"id"</span> : <span class="number">4</span>,</div><div class="line">                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                    &#125;</div><div class="line">                ],</div><div class="line">                <span class="attr">"pid"</span> : <span class="number">1</span>,</div><div class="line">                <span class="attr">"id"</span> : <span class="number">2</span>,</div><div class="line">                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">"children"</span> : [&#123;</div><div class="line">                        <span class="attr">"children"</span> : [&#123;</div><div class="line">                                <span class="attr">"children"</span> : [],</div><div class="line">                                <span class="attr">"pid"</span> : <span class="number">5</span>,</div><div class="line">                                <span class="attr">"id"</span> : <span class="number">8</span>,</div><div class="line">                                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                            &#125;</div><div class="line">                        ],</div><div class="line">                        <span class="attr">"pid"</span> : <span class="number">3</span>,</div><div class="line">                        <span class="attr">"id"</span> : <span class="number">5</span>,</div><div class="line">                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                    &#125;, &#123;</div><div class="line">                        <span class="attr">"children"</span> : [],</div><div class="line">                        <span class="attr">"pid"</span> : <span class="number">3</span>,</div><div class="line">                        <span class="attr">"id"</span> : <span class="number">7</span>,</div><div class="line">                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                    &#125;</div><div class="line">                ],</div><div class="line">                <span class="attr">"pid"</span> : <span class="number">1</span>,</div><div class="line">                <span class="attr">"id"</span> : <span class="number">3</span>,</div><div class="line">                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"pid"</span> : <span class="number">0</span>,</div><div class="line">        <span class="attr">"id"</span> : <span class="number">1</span>,</div><div class="line">        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>这种格式是不是更清晰呢？</li>
</ul>
<h2 id="森林结构实现"><a href="#森林结构实现" class="headerlink" title="森林结构实现"></a>森林结构实现</h2><h3 id="森林管理类"><a href="#森林管理类" class="headerlink" title="森林管理类"></a>森林管理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 森林节点管理类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> bearsmall</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForestNodeManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; list;<span class="comment">// 森林的所有节点</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForestNodeManager</span><span class="params">(TreeNode[] items)</span> </span>&#123;</div><div class="line">        list = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : items) &#123;</div><div class="line">            list.add(treeNode);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForestNodeManager</span><span class="params">(List&lt;TreeNode&gt; items)</span> </span>&#123;</div><div class="line">        list = items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据节点ID获取一个节点</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     *            节点ID</div><div class="line">     * <span class="doctag">@return</span> 对应的节点对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getTreeNodeAT</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : list) &#123;</div><div class="line">            <span class="keyword">if</span> (treeNode.getId() == id)</div><div class="line">                <span class="keyword">return</span> treeNode;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取树的根节点【一个森林对应多颗树】</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 树的根节点集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;TreeNode&gt; roots = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : list) &#123;</div><div class="line">            <span class="keyword">if</span> (treeNode.getPid() == <span class="number">0</span>)</div><div class="line">                roots.add(treeNode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> roots;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="森林节点归并类"><a href="#森林节点归并类" class="headerlink" title="森林节点归并类"></a>森林节点归并类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 节点归并类</div><div class="line"> * <span class="doctag">@author</span> bearsmall</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForestNodeMerger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将节点数组归并为一个森林（多棵树）（填充节点的children域）</div><div class="line">     * 时间复杂度为O(n^2)</div><div class="line">     * <span class="doctag">@param</span> items 节点域</div><div class="line">     * <span class="doctag">@return</span> 多棵树的根节点集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;TreeNode&gt; <span class="title">merge</span><span class="params">(TreeNode[] items)</span></span>&#123;</div><div class="line">        ForestNodeManager forestNodeManager = <span class="keyword">new</span> ForestNodeManager(items);</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : items) &#123;</div><div class="line">            <span class="keyword">if</span>(treeNode.getPid()!=<span class="number">0</span>)&#123;</div><div class="line">                TreeNode t = forestNodeManager.getTreeNodeAT(treeNode.getPid());</div><div class="line">                t.getChildren().add(treeNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> forestNodeManager.getRoot();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将节点数组归并为一个森林（多棵树）（填充节点的children域）</div><div class="line">     * 时间复杂度为O(n^2)</div><div class="line">     * <span class="doctag">@param</span> items 节点域</div><div class="line">     * <span class="doctag">@return</span> 多棵树的根节点集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;TreeNode&gt; <span class="title">merge</span><span class="params">(List&lt;TreeNode&gt; items)</span></span>&#123;</div><div class="line">        ForestNodeManager forestNodeManager = <span class="keyword">new</span> ForestNodeManager(items);</div><div class="line">        <span class="keyword">for</span> (TreeNode treeNode : items) &#123;</div><div class="line">            <span class="keyword">if</span>(treeNode.getPid()!=<span class="number">0</span>)&#123;</div><div class="line">                TreeNode t = forestNodeManager.getTreeNodeAT(treeNode.getPid());</div><div class="line">                t.getChildren().add(treeNode);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> forestNodeManager.getRoot();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测一下"><a href="#测一下" class="headerlink" title="测一下"></a>测一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TreeNode[] treeNodes = <span class="keyword">new</span> TreeNode[<span class="number">10</span>];</div><div class="line">        treeNodes[<span class="number">0</span>] = <span class="keyword">new</span> TreeNode(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">1</span>] = <span class="keyword">new</span> TreeNode(<span class="number">2</span>, <span class="number">0</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">2</span>] = <span class="keyword">new</span> TreeNode(<span class="number">3</span>, <span class="number">1</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">3</span>] = <span class="keyword">new</span> TreeNode(<span class="number">4</span>, <span class="number">2</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">4</span>] = <span class="keyword">new</span> TreeNode(<span class="number">5</span>, <span class="number">3</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">5</span>] = <span class="keyword">new</span> TreeNode(<span class="number">6</span>, <span class="number">4</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">6</span>] = <span class="keyword">new</span> TreeNode(<span class="number">7</span>, <span class="number">3</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">7</span>] = <span class="keyword">new</span> TreeNode(<span class="number">8</span>, <span class="number">5</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">8</span>] = <span class="keyword">new</span> TreeNode(<span class="number">9</span>, <span class="number">6</span>, <span class="string">""</span>);</div><div class="line">        treeNodes[<span class="number">9</span>] = <span class="keyword">new</span> TreeNode(<span class="number">10</span>, <span class="number">9</span>, <span class="string">""</span>);</div><div class="line">        List&lt;TreeNode&gt; tns = ForestNodeMerger.merge(treeNodes);</div><div class="line">        JSONArray jsonArray = JSONArray.fromObject(tns);</div><div class="line">        System.out.println(jsonArray);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">        <span class="attr">"children"</span> : [&#123;</div><div class="line">                <span class="attr">"children"</span> : [&#123;</div><div class="line">                        <span class="attr">"children"</span> : [&#123;</div><div class="line">                                <span class="attr">"children"</span> : [],</div><div class="line">                                <span class="attr">"pid"</span> : <span class="number">5</span>,</div><div class="line">                                <span class="attr">"id"</span> : <span class="number">8</span>,</div><div class="line">                                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                            &#125;</div><div class="line">                        ],</div><div class="line">                        <span class="attr">"pid"</span> : <span class="number">3</span>,</div><div class="line">                        <span class="attr">"id"</span> : <span class="number">5</span>,</div><div class="line">                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                    &#125;, &#123;</div><div class="line">                        <span class="attr">"children"</span> : [],</div><div class="line">                        <span class="attr">"pid"</span> : <span class="number">3</span>,</div><div class="line">                        <span class="attr">"id"</span> : <span class="number">7</span>,</div><div class="line">                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                    &#125;</div><div class="line">                ],</div><div class="line">                <span class="attr">"pid"</span> : <span class="number">1</span>,</div><div class="line">                <span class="attr">"id"</span> : <span class="number">3</span>,</div><div class="line">                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"pid"</span> : <span class="number">0</span>,</div><div class="line">        <span class="attr">"id"</span> : <span class="number">1</span>,</div><div class="line">        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"children"</span> : [&#123;</div><div class="line">                <span class="attr">"children"</span> : [&#123;</div><div class="line">                        <span class="attr">"children"</span> : [&#123;</div><div class="line">                                <span class="attr">"children"</span> : [&#123;</div><div class="line">                                        <span class="attr">"children"</span> : [],</div><div class="line">                                        <span class="attr">"pid"</span> : <span class="number">9</span>,</div><div class="line">                                        <span class="attr">"id"</span> : <span class="number">10</span>,</div><div class="line">                                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                                    &#125;</div><div class="line">                                ],</div><div class="line">                                <span class="attr">"pid"</span> : <span class="number">6</span>,</div><div class="line">                                <span class="attr">"id"</span> : <span class="number">9</span>,</div><div class="line">                                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                            &#125;</div><div class="line">                        ],</div><div class="line">                        <span class="attr">"pid"</span> : <span class="number">4</span>,</div><div class="line">                        <span class="attr">"id"</span> : <span class="number">6</span>,</div><div class="line">                        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">                    &#125;</div><div class="line">                ],</div><div class="line">                <span class="attr">"pid"</span> : <span class="number">2</span>,</div><div class="line">                <span class="attr">"id"</span> : <span class="number">4</span>,</div><div class="line">                <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"pid"</span> : <span class="number">0</span>,</div><div class="line">        <span class="attr">"id"</span> : <span class="number">2</span>,</div><div class="line">        <span class="attr">"content"</span> : <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="ok！"><a href="#ok！" class="headerlink" title=" ok！"></a><strong> ok！</strong></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之单例模式总结]]></title>
      <url>https://bearsmall.github.io/2016/06/02/designPattern/2016-06-02-single-instance/</url>
      <content type="html"><![CDATA[<h2 id="常见的单例模式"><a href="#常见的单例模式" class="headerlink" title="常见的单例模式"></a>常见的单例模式</h2><ul>
<li>恶汉模式</li>
<li>懒汉模式</li>
<li>双重检查锁</li>
<li>内部类</li>
<li>枚举<a id="more"></a>
<h2 id="具体实现方式"><a href="#具体实现方式" class="headerlink" title="具体实现方式"></a>具体实现方式</h2></li>
</ul>
<h3 id="1-饿汉模式"><a href="#1-饿汉模式" class="headerlink" title="1. 饿汉模式"></a>1. 饿汉模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single1</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Single1 single = <span class="keyword">new</span> Single1();</div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Single1</span><span class="params">()</span> </span>&#123;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">             <span class="keyword">return</span> single;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="2-1-懒汉模式"><a href="#2-1-懒汉模式" class="headerlink" title="2.1 懒汉模式"></a>2.1 懒汉模式</h3><ul>
<li>线程不安全</li>
<li>延迟加载</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single2_1</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Single2_1 single;</div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Single2_1</span><span class="params">()</span> </span>&#123;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single2_1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">         <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</div><div class="line">             single = <span class="keyword">new</span> Single2_1();</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> single;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-懒汉模式"><a href="#2-2-懒汉模式" class="headerlink" title="2.2 懒汉模式"></a>2.2 懒汉模式</h3><ul>
<li>线程安全</li>
<li>同步</li>
<li>延迟加载</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single2_2</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Single2_2 single;</div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Single2_2</span><span class="params">()</span> </span>&#123;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Single2_2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">         <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</div><div class="line">             single = <span class="keyword">new</span> Single2_2();</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> single;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="3-双重监测锁"><a href="#3-双重监测锁" class="headerlink" title="3. 双重监测锁"></a>3. 双重监测锁</h3><ul>
<li>懒汉模式</li>
<li>线程安全</li>
<li>同步</li>
<li>延迟加载</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single3</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single3 single;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single3</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single3 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Single3.class) &#123;</div><div class="line">                <span class="keyword">if</span>(single == <span class="keyword">null</span>)&#123;</div><div class="line">                    single = <span class="keyword">new</span> Single3();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> single;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-内部类"><a href="#4-内部类" class="headerlink" title="4. 内部类"></a>4. 内部类</h3><ul>
<li>线程安全</li>
<li>延迟加载</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single4</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single4 single = <span class="keyword">new</span> Single4();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single4</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> SingleHolder.single;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5. 枚举"></a>5. 枚举</h3><ul>
<li>线程安全</li>
<li>饿汉</li>
<li>JVM底层天然支持</li>
<li>反射，序列化对其无效</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Single5 &#123;</div><div class="line">     INSTANCE;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</div><div class="line">         System.out.println(<span class="string">"其它方法"</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="以上单例的实现方式除枚举外都可以通过反射和反序列化的方式进行破解！"><a href="#以上单例的实现方式除枚举外都可以通过反射和反序列化的方式进行破解！" class="headerlink" title="以上单例的实现方式除枚举外都可以通过反射和反序列化的方式进行破解！"></a>以上单例的实现方式除枚举外都可以通过反射和反序列化的方式进行破解！</h4><h4 id="通过枚举方式实现的单例模式是JVM底层天然实现的单例，反射无法破解！"><a href="#通过枚举方式实现的单例模式是JVM底层天然实现的单例，反射无法破解！" class="headerlink" title="通过枚举方式实现的单例模式是JVM底层天然实现的单例，反射无法破解！"></a>通过枚举方式实现的单例模式是JVM底层天然实现的单例，反射无法破解！</h4><h2 id="攻击单例模式"><a href="#攻击单例模式" class="headerlink" title="攻击单例模式"></a>攻击单例模式</h2><h3 id="反射攻击单例模式"><a href="#反射攻击单例模式" class="headerlink" title="反射攻击单例模式"></a>反射攻击单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectAttack</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         <span class="comment">//理想中唯一的单例</span></div><div class="line">         Single1 s1 = Single1.getInstance();</div><div class="line">         Class&lt;Single1&gt; clazz = (Class&lt;Single1&gt;) Class.forName(<span class="string">"com.xy.single.Single1"</span>);</div><div class="line">         <span class="comment">//反射出来的多例</span></div><div class="line">         Single1 s2 = clazz.newInstance();</div><div class="line">         System.out.println(s1==s2);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>打印结果：false</p>
</li>
<li><p>解决方法：在构造函数中做文章！【如果想通过反射破坏单例则抛出运行时异常】</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Single1</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span>(single!=<span class="keyword">null</span>)</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="序列化攻击单例模式"><a href="#序列化攻击单例模式" class="headerlink" title="序列化攻击单例模式"></a>序列化攻击单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeAttack</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         <span class="comment">//理想中的单例</span></div><div class="line">         Single1 single1 = Single1.getInstance();</div><div class="line">         <span class="comment">//将对象序列化</span></div><div class="line">         FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"G:/a.txt"</span>);</div><div class="line">         ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</div><div class="line">         oos.writeObject(single1);</div><div class="line">         oos.close();</div><div class="line">         fos.close();</div><div class="line">         <span class="comment">//反序列化对象完成破解单例</span></div><div class="line">         FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"G:/a.txt"</span>);</div><div class="line">         ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</div><div class="line">         Single1 single2 = (Single1) ois.readObject();</div><div class="line">         ois.close();</div><div class="line">         fis.close();</div><div class="line">         System.out.println(single1==single2);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>打印结果：false</p>
</li>
<li><p>解决方法：单例类中添加readResolver方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</div><div class="line">  <span class="keyword">return</span> single;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>该方法在ObjectReader调用readObject方法的时候触发【基于回调的】</p>
</li>
<li><p>注意返回值是Object类型，可能会抛异常</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查看.class文件的版本号]]></title>
      <url>https://bearsmall.github.io/2016/06/02/tool/2016-06-02-class-version/</url>
      <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>十六进制编辑器</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>用编辑器打开.class文件</li>
<li>可以看到如下内容：<a id="more"></a>
<img src="http://okv02t39e.bkt.clouddn.com/javase-class-file-version-1.png" alt="Class File Version"></li>
</ol>
<h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ol>
<li>我们只关心第一行画线的部分。</li>
<li>前面八个字节CA FE BA BE是固定的。</li>
<li>随后四个字节00 00是次版本号。</li>
<li>再随后四个字节00 34是主版本号【这里是1.8】</li>
</ol>
<h3 id="JDK版本号对应关系如下："><a href="#JDK版本号对应关系如下：" class="headerlink" title="JDK版本号对应关系如下："></a>JDK版本号对应关系如下：</h3><ul>
<li>34（对应十进制的52）：JDK1.8</li>
<li>33（对应十进制的51）：JDK1.7</li>
<li>32（对应十进制的50）：JDK1.6</li>
<li>31（对应十进制的49）：JDK1.5</li>
<li>30（对应十进制的48）：JDK1.4</li>
<li>2F（对应十进制的47）：JDK1.3</li>
<li>2E（对应十进制的46）：JDK1.2</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Spring4+Hibernate4的通用数据访问层+业务逻辑层（Dao层+Service层）设计与实现]]></title>
      <url>https://bearsmall.github.io/2016/06/02/javaweb/2016-06-02-framework-BaseSSH/</url>
      <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><ul>
<li><p>基于泛型的依赖注入。当我们的项目中有很多的Model时，相应的Dao（DaoImpl),Service(ServiceImpl)也会增多。</p>
</li>
<li><p>而我们对这些Model的操作很多都是类似的，下面是我举出的一些（见名知意，其它自行脑补）：</p>
<a id="more"></a></li>
</ul>
<ol>
<li>save</li>
<li>saveAll</li>
<li>findById</li>
<li>update</li>
<li>saveOrUpdate</li>
<li>delete</li>
<li>deleteAll</li>
<li>deleteById</li>
<li>loadAll</li>
<li>load(int page,int rows)</li>
<li>getTotalCount</li>
<li>getScrollData(int firstResult, int maxResult)</li>
<li>getScrollData(int firstResult, int maxResult, LinkedHashMap<string, string=""> orderby)</string,></li>
<li>getScrollData(int firstResult, int maxResult, String where, Object[] params)</li>
<li>getScrollData(int firstResult, int maxResult, String where, Object[] params, LinkedHashMap<string, string=""> orderby)</string,></li>
</ol>
<ul>
<li><p>如果我们在每个Dao(DaoImpl),Service(ServiceImpl)中都定义这些方法，我们来算一下。假如有20个Model，那么：20<em>15</em>（2+2）= 1200。纳里，这么一堆破东西就花了1200个方法！！！！（下次可以用这个凑代码量了。。。。）平均每个方法实现了20次，平均每个方法复制了不下40次。还要保证不出任何错误，这个还真是个苦力活。下面是我们更先进的方法。【注：此方法必须将spring更新到4，Spring3还不支持泛型注入！】</p>
</li>
<li><p>我们在Dao(DaoImpl),Service(ServiceImpl)中定义BaseDao(BaseDaoImpl),BaseService(BaseServiceImpl),然后由于ORM使用的是hibernate，我们在操作一个实体的时候其实只需要知道两个属性{Model.id.class（主键类型），Model.class（实体类类型）}，好吧其实都是Class类型，还是可序列化的。这样我们的BaseDao在实现的时候不需要关注具体是哪个实体类，根据Model.id.class和Model.class即可获取操作的一切【就CURD操作来说】。然后每个具体的Dao继承BaseDao,就可以拥有BaseDao中定义的十多个方法（不需重复复制代码），还可以根据业务需求扩展具体Dao中的方法，做到了很大程度的解耦（基础操作和特殊操作的解耦）。然后具体的DaoImpl首先继承自BaseDaoImpl（这样那十多个基础方法的实现就又可以省去了）再实现自己Dao的特殊业务逻辑方法。解耦很到位！【当然既然是基于泛型的那么别传错了Model类！！！】。</p>
</li>
<li><p>同理，Service（ServiceImpl）层也是一样的！！！</p>
</li>
</ul>
<h2 id="包的结构"><a href="#包的结构" class="headerlink" title="包的结构"></a>包的结构</h2><ul>
<li>com.xy.model<ul>
<li>Car</li>
<li>Driver</li>
<li>Passenger</li>
</ul>
</li>
<li>com.xy.dao<ul>
<li>BaseDao</li>
<li>CarDao</li>
<li>DriverDao</li>
<li>PassengerDao</li>
</ul>
</li>
<li>com.xy.dao.impl<ul>
<li>BaseDaoImpl</li>
<li>CarDaoImpl</li>
<li>DriverDaoImpl</li>
<li>PassengerDaoImpl</li>
</ul>
</li>
<li>com.xy.service<ul>
<li>BaseService</li>
<li>CarService</li>
<li>DriverService</li>
<li>PassengerService</li>
</ul>
</li>
<li>com.xy.service.impl<ul>
<li>BaseServiceImpl</li>
<li>CarServiceImpl</li>
<li>DriverServiceImpl</li>
<li>PassengerServiceImpl</li>
</ul>
</li>
</ul>
<h2 id="配置文件信息"><a href="#配置文件信息" class="headerlink" title="配置文件信息"></a>配置文件信息</h2><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml,classpath:spring-hibernate.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>singleSession<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring-xml"><a href="#Spring-xml" class="headerlink" title="Spring.xml"></a>Spring.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/context</div><div class="line">http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 引入属性文件,config.properties位于src/main/resources目录下 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config.properties"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动扫描dao和service包(自动注入) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xy.dao.**,com.xy.service.**"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring-hibernate-xml"><a href="#Spring-hibernate-xml" class="headerlink" title="Spring-hibernate.xml"></a>Spring-hibernate.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></div><div class="line">http://www.springframework.org/schema/beans</div><div class="line">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">http://www.springframework.org/schema/tx</div><div class="line">http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">http://www.springframework.org/schema/aop</div><div class="line">http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</div><div class="line">"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_username&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_password&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 连接池最大使用连接数量 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;validationQuery&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"25200000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 打开removeAbandoned功能 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandoned"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 1800秒，也就是30分钟 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span>=<span class="string">"1800"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logAbandoned"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 监控数据库 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="filters" value="stat" /&gt; --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"mergeStat"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置hibernate session工厂 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- web项目启动时是否更新表结构 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>$&#123;hibernate.hbm2ddl.auto&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 系统使用的数据库方言，也就是使用的数据库类型 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>$&#123;hibernate.dialect&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 是否打印Hibernate生成的SQL到控制台 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>$&#123;hibernate.show_sql&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 是否格式化打印出来的SQL --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>$&#123;hibernate.format_sql&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描注解方式配置的hibernate类文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.xy.model<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 自动扫描hbm方式配置的hibernate文件和.hbm文件 --&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;property name="mappingDirectoryLocations"&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;classpath:me/gacl/model/hbm&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">         --&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 注解方式配置事物 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="核心部分（Dao层）"><a href="#核心部分（Dao层）" class="headerlink" title="核心部分（Dao层）"></a>核心部分（Dao层）</h2><h3 id="BaseDao-Java"><a href="#BaseDao-Java" class="headerlink" title="BaseDao.Java"></a>BaseDao.Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDaoInter</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Serializable</span> ,<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 由session工厂获取当前session对象</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将实体对象保存到数据库中</div><div class="line">     * <span class="doctag">@param</span> t 待保存的实体对象</div><div class="line">     * <span class="doctag">@return</span> 实体对象的ID</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">save</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将实体对象【集合】保存到数据库中</div><div class="line">     * <span class="doctag">@param</span> ct 实体对象【集合】</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(Collection&lt;T&gt; ct)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据Id查询实体对象</div><div class="line">     * <span class="doctag">@param</span> id 表记录中的对应的id字段</div><div class="line">     * <span class="doctag">@return</span> 对应的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(K id)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新一条记录</div><div class="line">     * <span class="doctag">@param</span> t 待更新记录对应的实体对象</div><div class="line">     * <span class="doctag">@return</span> 更新后的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">update</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 保存或更新一个实体对象到表记录中</div><div class="line">     * <span class="doctag">@param</span> t 待更新的实体对象</div><div class="line">     * <span class="doctag">@return</span> 更新后的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">saveOrUpdate</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除一个实体对象对应的表记录</div><div class="line">     * <span class="doctag">@param</span> t 待删除的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除一组记录</div><div class="line">     * <span class="doctag">@param</span> ct 待删除记录集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Collection&lt;T&gt; ct)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据id删除一条记录</div><div class="line">     * <span class="doctag">@param</span> id 待删除记录id</div><div class="line">     * <span class="doctag">@return</span> 是否删除成功（id是否有效）</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(K id)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 加载所有记录集合</div><div class="line">     * <span class="doctag">@return</span> 所有记录集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">loadAll</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页加载记录集合</div><div class="line">     * <span class="doctag">@param</span> page 当前第多少页</div><div class="line">     * <span class="doctag">@param</span> rows 每页最多多少行数据</div><div class="line">     * <span class="doctag">@return</span> 第page页的数据集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">load</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> rows)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取总记录数</div><div class="line">     * <span class="doctag">@return</span> 总数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalCount</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/******************************HQL******************************/</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取所有记录</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> orderby 排序,Key为排序属性,Value为asc/desc,如:</div><div class="line">     *  LinkedHashMap&lt;String, String&gt; orderby = new LinkedHashMap&lt;String, String&gt;();</div><div class="line">        orderby.put("email", "asc");</div><div class="line">        orderby.put("password", "desc");</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult, LinkedHashMap&lt;String, String&gt; orderby)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> where 条件语句,不带where关键字,条件语句只能使用位置参数,位置参数的索引值以1开始,如:o.username=?1 and o.password=?2</div><div class="line">     * <span class="doctag">@param</span> params 条件语句出现的位置参数值</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult, String where, Object[] params)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> where 条件语句,不带where关键字,条件语句只能使用位置参数,位置参数的索引值以1开始,如:o.username=?1 and o.password=?2</div><div class="line">     * <span class="doctag">@param</span> params 条件语句出现的位置参数值</div><div class="line">     * <span class="doctag">@param</span> orderby 排序,Key为排序属性,Value为asc/desc,如:</div><div class="line">     *  LinkedHashMap&lt;String, String&gt; orderby = new LinkedHashMap&lt;String, String&gt;();</div><div class="line">        orderby.put("email", "asc");</div><div class="line">        orderby.put("password", "desc");</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult, String where, Object[] params, LinkedHashMap&lt;String, String&gt; orderby)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CarDao-java"><a href="#CarDao-java" class="headerlink" title="CarDao.java"></a>CarDao.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarDaoInter</span> <span class="keyword">extends</span> <span class="title">BaseDaoInter</span>&lt;<span class="title">Integer</span>,<span class="title">Car</span>&gt;</span>&#123;</div><div class="line">    <span class="comment">//定义扩展的方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DriverDao-java"><a href="#DriverDao-java" class="headerlink" title="DriverDao.java"></a>DriverDao.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DriverDaoInter</span> <span class="keyword">extends</span> <span class="title">BaseDaoInter</span>&lt;<span class="title">Integer</span>,<span class="title">Driver</span>&gt;</span>&#123;    &lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;</div><div class="line">       <span class="comment">//定义扩展的方法</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PassengerDao-java"><a href="#PassengerDao-java" class="headerlink" title="PassengerDao.java"></a>PassengerDao.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PassengerDaoInter</span> <span class="keyword">extends</span> <span class="title">BaseDaoInter</span>&lt;<span class="title">Integer</span>,<span class="title">Passenger</span>&gt;</span>&#123;&lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;</div><div class="line">      <span class="comment">//定义扩展的方法</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BaseDaoImpl-java"><a href="#BaseDaoImpl-java" class="headerlink" title="BaseDaoImpl.java"></a>BaseDaoImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 不一定必须是abstract类型的， 请不要对BaseDaoImpl使用<span class="doctag">@Repository</span>注解，因为无法直接指定clatt属性值</div><div class="line"> * class值由继承类来指定</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> BearSmall</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Serializable</span>, <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">BaseDaoInter</span>&lt;<span class="title">K</span>, <span class="title">T</span>&gt; &#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SessionFactory sessionFactory; <span class="comment">// 从容器中注入session工厂【无需get,set方法】</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Class&lt;T&gt; clatt; <span class="comment">// 【实体类对应的Class对象】</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * //向子类暴露的接口获用来获取sessionFactory</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> sessionFactory</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 保留指定clatt值的接口【通过子类显示调用父类的构造函数来指定】</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> clatt</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDaoImpl</span><span class="params">(Class&lt;T&gt; clatt)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.clatt = clatt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// @SuppressWarnings("unchecked")</span></div><div class="line">    <span class="comment">// public BaseDaoImpl() &#123;//另外一种方式指定clatt值，要求类必须是abstract类型</span></div><div class="line">    <span class="comment">// ParameterizedType parameterizedType =</span></div><div class="line">    <span class="comment">// (ParameterizedType)this.getClass().getGenericSuperclass();</span></div><div class="line">    <span class="comment">// clatt= (Class&lt;T&gt;)(parameterizedType.getActualTypeArguments()[0]);</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getSessionFactory().getCurrentSession();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">save</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">return</span> (K) session.save(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(K id)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        T t = (T) session.get(clatt, id);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(Collection&lt;T&gt; ct)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">for</span> (T t : ct) &#123;</div><div class="line">            session.save(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">update</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        session.update(t);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Collection&lt;T&gt; ct)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="keyword">for</span> (T t : ct) &#123;</div><div class="line">            session.delete(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">saveOrUpdate</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        session.saveOrUpdate(t);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        session.delete(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(K id)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        T t = (T) session.get(clatt, id);</div><div class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        session.delete(t);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">loadAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Criteria criteria = session.createCriteria(clatt);</div><div class="line">        QueryResult&lt;T&gt; result = <span class="keyword">new</span> QueryResult&lt;&gt;();</div><div class="line">        result.setDatas(criteria.list());</div><div class="line">        result.setTotalCount(Long.parseLong(criteria</div><div class="line">                .setProjection(Projections.rowCount()).uniqueResult()</div><div class="line">                .toString()));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">load</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> rows)</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Criteria criteria = session.createCriteria(clatt);</div><div class="line">        criteria.setFirstResult((page - <span class="number">1</span>) * rows);</div><div class="line">        criteria.setMaxResults(rows);</div><div class="line">        QueryResult&lt;T&gt; result = <span class="keyword">new</span> QueryResult&lt;&gt;();</div><div class="line">        result.setDatas(criteria.list());</div><div class="line">        result.setTotalCount(Long.parseLong(criteria</div><div class="line">                .setProjection(Projections.rowCount()).uniqueResult()</div><div class="line">                .toString()));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        Session session = getSession();</div><div class="line">        Criteria criteria = session.createCriteria(clatt);</div><div class="line">        Object object = criteria.setProjection(Projections.rowCount())</div><div class="line">                .uniqueResult();</div><div class="line">        <span class="keyword">long</span> totalCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</div><div class="line">            totalCount = Long.parseLong(object.toString());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> totalCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/****************************** HQL ******************************/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getScrollData(-<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getScrollData(firstResult, maxResult, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult,</span></span></div><div class="line">            LinkedHashMap&lt;String, String&gt; orderby) &#123;</div><div class="line">        <span class="keyword">return</span> getScrollData(firstResult, maxResult, <span class="keyword">null</span>, <span class="keyword">null</span>, orderby);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult,</span></span></div><div class="line">            String where, Object[] params) &#123;</div><div class="line">        <span class="keyword">return</span> getScrollData(firstResult, maxResult, where, params, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult,</span></span></div><div class="line">            String where, Object[] params, LinkedHashMap&lt;String, String&gt; orderby) &#123;</div><div class="line">        String entityName = clatt.getSimpleName();</div><div class="line">        String whereql = where != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(where.trim()) ? <span class="string">" where "</span></div><div class="line">                + where : <span class="string">""</span>;</div><div class="line">        Session session = getSession();</div><div class="line">        Query query = session.createQuery(<span class="string">"select o from "</span> + entityName + <span class="string">" o"</span></div><div class="line">                + whereql + buildOrderby(orderby));</div><div class="line">        <span class="keyword">if</span> (firstResult != -<span class="number">1</span> &amp;&amp; maxResult != -<span class="number">1</span>)</div><div class="line">            query.setFirstResult(firstResult).setMaxResults(maxResult);</div><div class="line">        setQueryParameter(query, params);</div><div class="line"></div><div class="line">        QueryResult&lt;T&gt; qr = <span class="keyword">new</span> QueryResult&lt;T&gt;();</div><div class="line">        <span class="comment">// qr.setResultlist(query.getResultList());</span></div><div class="line">        Query queryCount = session.createQuery(<span class="string">"select count(o) from "</span></div><div class="line">                + entityName + <span class="string">" o"</span> + whereql);</div><div class="line">        setQueryParameter(queryCount, params);</div><div class="line">        <span class="keyword">long</span> count = (Long) queryCount.uniqueResult();</div><div class="line">        qr.setTotalCount(count);</div><div class="line">        qr.setDatas(query.list());</div><div class="line">        <span class="keyword">return</span> qr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置查询参数</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> query</div><div class="line">     *            查询对象</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     *            参数值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setQueryParameter</span><span class="params">(Query query, Object[] params)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</div><div class="line">                query.setParameter(i, params[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构建排序语句</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> orderby</div><div class="line">     *            排序属性与asc/desc, Key为属性,Value为asc/desc</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildOrderby</span><span class="params">(LinkedHashMap&lt;String, String&gt; orderby)</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">if</span> (orderby != <span class="keyword">null</span> &amp;&amp; !orderby.isEmpty()) &#123;</div><div class="line">            sb.append(<span class="string">" order by "</span>);</div><div class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : orderby.entrySet()) &#123;</div><div class="line">                sb.append(<span class="string">"o."</span>).append(entry.getKey()).append(<span class="string">" "</span>)</div><div class="line">                        .append(entry.getValue()).append(<span class="string">','</span>);</div><div class="line">            &#125;</div><div class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CarDaoImpl-java"><a href="#CarDaoImpl-java" class="headerlink" title="CarDaoImpl.java"></a>CarDaoImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"carDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">Integer</span>,<span class="title">Car</span>&gt; <span class="keyword">implements</span> <span class="title">CarDaoInter</span></span>&#123;</div><div class="line">    <span class="comment">//通过调用父类的构造函数指定clazz值，即实体类的类类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarDaoImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Car.class);</div><div class="line">    &#125;</div><div class="line">     <span class="comment">/*****************************************扩展的方法的实现****************************************/</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DriverDaoImpl-java"><a href="#DriverDaoImpl-java" class="headerlink" title="DriverDaoImpl.java"></a>DriverDaoImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(value=<span class="string">"driverDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">Integer</span>,<span class="title">Driver</span>&gt; <span class="keyword">implements</span> <span class="title">DriverDaoInter</span></span>&#123;</div><div class="line">    <span class="comment">//通过调用父类的构造函数指定clazz值，即实体类的类类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DriverDaoImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Driver.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*****************************************扩展的方法的实现****************************************/</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PassengerDaoImpl-java"><a href="#PassengerDaoImpl-java" class="headerlink" title="PassengerDaoImpl.java"></a>PassengerDaoImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"passengerDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassengerDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">Integer</span>,<span class="title">Passenger</span>&gt; <span class="keyword">implements</span> <span class="title">PassengerDaoInter</span> </span>&#123;</div><div class="line">    <span class="comment">//通过调用父类的构造函数指定clazz值，即实体类的类类型</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PassengerDaoImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Passenger.class);</div><div class="line">    &#125;&lt;pre name=<span class="string">"code"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java"</span>&gt;</div><div class="line">       <span class="comment">/*****************************************扩展的方法的实现****************************************/</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="核心部分（Service层）"><a href="#核心部分（Service层）" class="headerlink" title="核心部分（Service层）"></a>核心部分（Service层）</h2><h3 id="BaseService-java"><a href="#BaseService-java" class="headerlink" title="BaseService.java"></a>BaseService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseServiceInter</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Serializable</span>,<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;  </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将实体对象保存到数据库中</div><div class="line">     * <span class="doctag">@param</span> t 待保存的实体对象</div><div class="line">     * <span class="doctag">@return</span> 实体对象的ID</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">save</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将实体对象【集合】保存到数据库中</div><div class="line">     * <span class="doctag">@param</span> ct 实体对象【集合】</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(Collection&lt;T&gt; ct)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据Id查询实体对象</div><div class="line">     * <span class="doctag">@param</span> id 表记录中的对应的id字段</div><div class="line">     * <span class="doctag">@return</span> 对应的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(K id)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新一条记录</div><div class="line">     * <span class="doctag">@param</span> t 待更新记录对应的实体对象</div><div class="line">     * <span class="doctag">@return</span> 更新后的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">update</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 保存或更新一个实体对象到表记录中</div><div class="line">     * <span class="doctag">@param</span> t 待更新的实体对象</div><div class="line">     * <span class="doctag">@return</span> 更新后的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">saveOrUpdate</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除一个实体对象对应的表记录</div><div class="line">     * <span class="doctag">@param</span> t 待删除的实体对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除一组记录</div><div class="line">     * <span class="doctag">@param</span> ct 待删除记录集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Collection&lt;T&gt; ct)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据id删除一条记录</div><div class="line">     * <span class="doctag">@param</span> id 待删除记录id</div><div class="line">     * <span class="doctag">@return</span> 是否删除成功（id是否有效）</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(K id)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 加载所有记录集合</div><div class="line">     * <span class="doctag">@return</span> 所有记录集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">loadAll</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页加载记录集合</div><div class="line">     * <span class="doctag">@param</span> page 当前第多少页</div><div class="line">     * <span class="doctag">@param</span> rows 每页最多多少行数据</div><div class="line">     * <span class="doctag">@return</span> 第page页的数据集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">load</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> rows)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取总记录数</div><div class="line">     * <span class="doctag">@return</span> 总数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalCount</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/******************************HQL******************************/</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取所有记录</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> orderby 排序,Key为排序属性,Value为asc/desc,如:</div><div class="line">     *  LinkedHashMap&lt;String, String&gt; orderby = new LinkedHashMap&lt;String, String&gt;();</div><div class="line">        orderby.put("email", "asc");</div><div class="line">        orderby.put("password", "desc");</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult, LinkedHashMap&lt;String, String&gt; orderby)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> where 条件语句,不带where关键字,条件语句只能使用位置参数,位置参数的索引值以1开始,如:o.username=?1 and o.password=?2</div><div class="line">     * <span class="doctag">@param</span> params 条件语句出现的位置参数值</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult, String where, Object[] params)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页获取记录</div><div class="line">     * <span class="doctag">@param</span> firstResult 开始索引,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> maxResult 每页获取的记录数,如果输入值为-1,即获取全部数据</div><div class="line">     * <span class="doctag">@param</span> where 条件语句,不带where关键字,条件语句只能使用位置参数,位置参数的索引值以1开始,如:o.username=?1 and o.password=?2</div><div class="line">     * <span class="doctag">@param</span> params 条件语句出现的位置参数值</div><div class="line">     * <span class="doctag">@param</span> orderby 排序,Key为排序属性,Value为asc/desc,如:</div><div class="line">     *  LinkedHashMap&lt;String, String&gt; orderby = new LinkedHashMap&lt;String, String&gt;();</div><div class="line">        orderby.put("email", "asc");</div><div class="line">        orderby.put("password", "desc");</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult, String where, Object[] params, LinkedHashMap&lt;String, String&gt; orderby)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CarService-java"><a href="#CarService-java" class="headerlink" title="CarService.java"></a>CarService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarServiceInter</span> <span class="keyword">extends</span> <span class="title">BaseServiceInter</span>&lt;<span class="title">Integer</span>,<span class="title">Car</span>&gt;</span>&#123;</div><div class="line">    <span class="comment">//定义扩展的方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DriverService-java"><a href="#DriverService-java" class="headerlink" title="DriverService.java"></a>DriverService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DriverServiceInter</span> <span class="keyword">extends</span> <span class="title">BaseServiceInter</span>&lt;<span class="title">Integer</span>,<span class="title">Driver</span>&gt;</span>&#123;</div><div class="line">    <span class="comment">//定义扩展的方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PassengerService-java"><a href="#PassengerService-java" class="headerlink" title="PassengerService.java"></a>PassengerService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PassengerServiceInter</span> <span class="keyword">extends</span> <span class="title">BaseServiceInter</span>&lt;<span class="title">Integer</span>,<span class="title">Passenger</span>&gt;</span>&#123;</div><div class="line">    <span class="comment">//定义扩展的方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BaseServiceImpl-java"><a href="#BaseServiceImpl-java" class="headerlink" title="BaseServiceImpl.java"></a>BaseServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Serializable</span>,<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">implements</span> <span class="title">BaseServiceInter</span>&lt;<span class="title">K</span>,<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> BaseDaoInter&lt;K,T&gt; baseDao;        <span class="comment">//从容器中注入session工厂【无需get,set方法】</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">save</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.save(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(Collection&lt;T&gt; ct)</span> </span>&#123;</div><div class="line">        baseDao.saveAll(ct);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">findById</span><span class="params">(K id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.findById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">update</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.update(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">saveOrUpdate</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.saveOrUpdate(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        baseDao.delete(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Collection&lt;T&gt; ct)</span> </span>&#123;</div><div class="line">        baseDao.deleteAll(ct);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(K id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.deleteById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">loadAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.loadAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">load</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> rows)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.load(page, rows);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.getTotalCount();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/******************************HQL******************************/</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.getScrollData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> baseDao.getScrollData(firstResult, maxResult);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult,</span></span></div><div class="line">            LinkedHashMap&lt;String, String&gt; orderby) &#123;</div><div class="line">        <span class="keyword">return</span> baseDao.getScrollData(firstResult, maxResult, orderby);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult,</span></span></div><div class="line">            String where, Object[] params) &#123;</div><div class="line">        <span class="keyword">return</span> baseDao.getScrollData(firstResult, maxResult, where, params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryResult&lt;T&gt; <span class="title">getScrollData</span><span class="params">(<span class="keyword">int</span> firstResult, <span class="keyword">int</span> maxResult,</span></span></div><div class="line">            String where, Object[] params, LinkedHashMap&lt;String, String&gt; orderby) &#123;</div><div class="line">        <span class="keyword">return</span> baseDao.getScrollData(firstResult, maxResult, where, params, orderby);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CarServiceImpl-java"><a href="#CarServiceImpl-java" class="headerlink" title="CarServiceImpl.java"></a>CarServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"carProxy"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">Integer</span>,<span class="title">Car</span>&gt; <span class="keyword">implements</span> <span class="title">CarServiceInter</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CarDaoInter carDao;        <span class="comment">//从容器中注入session工厂【无需get,set方法】</span></div><div class="line"></div><div class="line">      <span class="comment">/*****************************************扩展的方法的实现****************************************/</span></div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="DriverServiceImpl-java"><a href="#DriverServiceImpl-java" class="headerlink" title="DriverServiceImpl.java"></a>DriverServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"driverProxy"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">Integer</span>,<span class="title">Driver</span>&gt; <span class="keyword">implements</span> <span class="title">DriverServiceInter</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DriverDaoInter driverDao;       <span class="comment">//从容器中注入session工厂【无需get,set方法】</span></div><div class="line"></div><div class="line">       <span class="comment">/*****************************************扩展的方法的实现****************************************/</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PassengerServiceImpl-java"><a href="#PassengerServiceImpl-java" class="headerlink" title="PassengerServiceImpl.java"></a>PassengerServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"passengerProxy"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassengerServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseServiceImpl</span>&lt;<span class="title">Integer</span>,<span class="title">Passenger</span>&gt; <span class="keyword">implements</span> <span class="title">PassengerServiceInter</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PassengerDaoInter passengerDao;     <span class="comment">//从容器中注入session工厂【无需get,set方法】</span></div><div class="line"></div><div class="line">      <span class="comment">/*****************************************扩展的方法的实现****************************************/</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><ul>
<li>Model类没有贴进来</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-spring4+hibernate4-base-dao-service-1.png" alt="spring4 hibernate base dao service"></p>
<ul>
<li>感觉这次的博文有点长。。。。。。</li>
<li>下次少贴点代码，多贴点图吧。。。。。。</li>
<li>欢迎拍砖！！！</li>
<li>Plus：源代码传送门：<a href="https://github.com/bearsmall/BASESSH2" target="_blank" rel="external">https://github.com/bearsmall/BASESSH2</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一次Android WebView使用的苦逼体验之旅]]></title>
      <url>https://bearsmall.github.io/2016/06/02/android/2016-06-02-android-webview/</url>
      <content type="html"><![CDATA[<h2 id="场景概述"><a href="#场景概述" class="headerlink" title="场景概述"></a>场景概述</h2><p>有时候会有这么样的需求：我们想在自己的原生Android app中嵌入其它功能模块，而这些模块的实现往往早就有BS模式的了。<br>所以简单起见，直接拿过来用吧。 多亏了Android的WebView控件，它能让我们的app充当浏览器的功能浏览网页。<br>如果网页已经是屏幕自适应的（各种框架bootstrap啊，amazeui啊，不拉不拉不拉的），那么呈现出来的效果会更好！<br><a id="more"></a></p>
<h2 id="使用webView"><a href="#使用webView" class="headerlink" title="使用webView"></a>使用webView</h2><h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><ol>
<li>【首先webView控件准备好</li>
<li>其次<figure class="highlight plain"><figcaption><span>android:name="android.permission.INTERNET"</span><a href="/>">```也不要忘了！】</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">3. 核心代码</div><div class="line"></div><div class="line">```java</div><div class="line">WebView webView= (WebView) findViewById(R.id.webview);</div><div class="line">webView.loadUrl(http://www.baidu.com);</div></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>哈哈哈哈，代码太简单了，是不是马上就有效果了:blush:。</li>
<li>高兴得太早了！</li>
<li>怎么有些按钮点了没效果，网页显示出来好像和预想的差太多！！！！</li>
</ul>
<h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><h4 id="1-【添加一些设置项】"><a href="#1-【添加一些设置项】" class="headerlink" title="1. 【添加一些设置项】"></a>1. 【添加一些设置项】</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//允许JS执行</div><div class="line">webView.getSettings().setJavaScriptEnabled(true);</div><div class="line">类似的还有如下这些设置【用到的时候查文档吧！】</div><div class="line">//设置WebView的一些缩放功能点</div><div class="line">webView.setScrollBarStyle(WebView.SCROLLBARS_OUTSIDE_OVERLAY);</div><div class="line">webView.setHorizontalScrollBarEnabled(false);</div><div class="line">webView.getSettings().setSupportZoom(true);</div><div class="line">//设置WebView可触摸放大缩小</div><div class="line">webView.getSettings().setBuiltInZoomControls(true);</div><div class="line">webView.setInitialScale(70);</div><div class="line">webView.setHorizontalScrollbarOverlay(true);</div><div class="line">//WebView双击变大，再双击后变小，当手动放大后，双击可以恢复到原始大小</div><div class="line">//webView.getSettings().setUseWideViewPort(true);</div><div class="line">//提高渲染的优先级</div><div class="line">webView.getSettings().setRenderPriority(RenderPriority.HIGH);</div><div class="line">//把图片加载放在最后来加载渲染</div><div class="line">//webView.getSettings().setBlockNetworkImage(true);</div><div class="line">//用WebView将字符串以HTML的形式显示出来</div><div class="line">webView.loadDataWithBaseURL("fake://not/needed", &lt;p&gt;zzz&lt;/p&gt;, "text/html", "utf-8", "");</div><div class="line">//listview,webview中滚动拖动到顶部或者底部时的阴影</div><div class="line">webView.setOverScrollMode(View.OVER_SCROLL_NEVER);</div><div class="line">webView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);//使用缓存</div><div class="line">WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); //默认不使用缓存！</div><div class="line">webView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY); //取消滚动条白边效果</div></pre></td></tr></table></figure>
<p>好了，大致满足我们的需求了。<br>等等，怎么点击超链接都是用的外部浏览器打开的啊，我还是想继续用webView打开！！！</p>
<ul>
<li>下面介绍一个东西：<figure class="highlight plain"><figcaption><span>WebViewClient())```;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">```WebViewClient```就是帮助```WebView```处理各种通知、请求事件的。我们可以自定义```WebViewClient```，并重写里面的方法</div><div class="line">见下一版本。</div><div class="line"></div><div class="line"></div><div class="line">### 版本3</div><div class="line"></div><div class="line">#### 1.【自定义WebViewClient】</div><div class="line"></div><div class="line">```java</div><div class="line">webview1.setWebViewClient(new WebViewClient()&#123;</div><div class="line">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;</div><div class="line">          view.loadUrl(url);</div><div class="line">          return true;</div><div class="line">    &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-当点击超链接时会触发该方法，返回true表明还是在webView中进行跳转不会跳到浏览器打开！"><a href="#2-当点击超链接时会触发该方法，返回true表明还是在webView中进行跳转不会跳到浏览器打开！" class="headerlink" title="2. 当点击超链接时会触发该方法，返回true表明还是在webView中进行跳转不会跳到浏览器打开！"></a>2. 当点击超链接时会触发该方法，返回true表明还是在webView中进行跳转不会跳到浏览器打开！</h4><h4 id="3-等等，我的页面有个按钮不起作用了："><a href="#3-等等，我的页面有个按钮不起作用了：" class="headerlink" title="3. 等等，我的页面有个按钮不起作用了：  "></a>3. 等等，我的页面有个按钮不起作用了：  <figure class="highlight plain"><figcaption><span>href="tel:110">110报警！```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 4. 试了一下用浏览器打开可以直接掉出拨号软件，怎么放到webView中就GG了呢？</div><div class="line"></div><div class="line">### 版本4</div><div class="line"></div><div class="line">#### 1. 设置webViewClient</div><div class="line"></div><div class="line">```java</div><div class="line">webview1.setWebViewClient(new MyWebViewClient());</div></pre></td></tr></table></figure></h4><h4 id="2-【深度定义WebViewClient】"><a href="#2-【深度定义WebViewClient】" class="headerlink" title="2. 【深度定义WebViewClient】"></a>2. 【深度定义WebViewClient】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义 WebViewClient 辅助WebView设置处理关于页面跳转，页面请求等操作</span></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(url.trim().startsWith(<span class="string">"tel"</span>))&#123;<span class="comment">//特殊情况tel，调用系统的拨号软件拨号【&lt;a href="tel:1111111111"&gt;1111111111&lt;/a&gt;】</span></div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">            i.setData(Uri.parse(url));</div><div class="line">            startActivity(i);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            view.loadUrl(url);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就可以控制tel协议了。 既然到了这一步其实还可以做更多控制。<br>比如我就遇到过这种：有一个按钮对应的超链接偏偏就不要用webView打开，而是用手机自带的浏览器打开！<br>【具体原因就不细说了，总之就是webView和浏览器还是有一定的差距的，正好我当时要实现的东西就被卡在那个节骨眼上了。。。。。】<br> 不过处理起来也不是很难，见下一个版本。</p>
<h3 id="版本5"><a href="#版本5" class="headerlink" title="版本5"></a>版本5</h3><h4 id="1-设置webViewClient"><a href="#1-设置webViewClient" class="headerlink" title="1. 设置webViewClient"></a>1. 设置webViewClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webview1.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div></pre></td></tr></table></figure>
<h4 id="2-扩展WebViewClient"><a href="#2-扩展WebViewClient" class="headerlink" title="2. 扩展WebViewClient"></a>2. 扩展WebViewClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义 WebViewClient 辅助WebView设置处理关于页面跳转，页面请求等操作【处理tel协议和视频通讯请求url的拦截转发】</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(url.trim().startsWith(<span class="string">"tel"</span>))&#123;<span class="comment">//特殊情况tel，调用系统的拨号软件拨号【&lt;a href="tel:1111111111"&gt;1111111111&lt;/a&gt;】</span></div><div class="line">                Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">                i.setData(Uri.parse(url));</div><div class="line">                startActivity(i);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                String port = url.substring(url.lastIndexOf(<span class="string">":"</span>)+<span class="number">1</span>,url.lastIndexOf(<span class="string">"/"</span>));<span class="comment">//尝试要拦截的视频通讯url格式(808端口)：【http://domainName:808/?roomName】</span></div><div class="line">                <span class="keyword">if</span>(port.equals(<span class="string">"808"</span>))&#123;<span class="comment">//特殊情况【若打开的链接是视频通讯地址格式则调用系统浏览器打开】</span></div><div class="line">                    Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">                    i.setData(Uri.parse(url));</div><div class="line">                    startActivity(i);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;<span class="comment">//其它非特殊情况全部放行</span></div><div class="line">                    view.loadUrl(url);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其实就是利用了这条url和其它url相比的独特性大笑（端口号不同），当然大家可能遇到的情况得根据实际情况来定。<br>写到这里是不是就玩完了呢？ no no no，好戏还在后头！<br>玩着玩着发现又有问题了，又有一个按钮不起作用。。。。。。这回是<figure class="highlight plain"><figcaption><span>type="file">文件上传```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我的天哪，怎么总是有这么多破事。 下面再介绍一个东西``` webView.setWebChromeClient(new WebChromeClient());</div></pre></td></tr></table></figure></p>
<p>【说明：WebChromeClient主要辅助WebView处理JavaScript的对话框、网站图标、网站title、加载进度等比等，不过它还能处理文件上传操作】<br>下一版本借用一下别人的代码</p>
<h3 id="版本6"><a href="#版本6" class="headerlink" title="版本6"></a>版本6</h3><h4 id="1-设置webChromeClient"><a href="#1-设置webChromeClient" class="headerlink" title="1. 设置webChromeClient"></a>1. 设置webChromeClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.setWebChromeClient(<span class="keyword">new</span> MyChromeWebClient());</div></pre></td></tr></table></figure>
<h4 id="2-定制WebChromeClient"><a href="#2-定制WebChromeClient" class="headerlink" title="2. 定制WebChromeClient"></a>2. 定制WebChromeClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义 WebChromeClient 辅助WebView处理图片上传操作【&lt;input type=file&gt; 文件上传标签】</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyChromeWebClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span> </span>&#123;</div><div class="line">        <span class="comment">// For Android 3.0-</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg)</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"openFileChoose(ValueCallback&lt;Uri&gt; uploadMsg)"</span>);</div><div class="line">            mUploadMessage = uploadMsg;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// For Android 3.0+</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">( ValueCallback uploadMsg, String acceptType )</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"openFileChoose( ValueCallback uploadMsg, String acceptType )"</span>);</div><div class="line">            mUploadMessage = uploadMsg;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult(</div><div class="line">                    Intent.createChooser(i, <span class="string">"File Browser"</span>),</div><div class="line">                    FILECHOOSER_RESULTCODE);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//For Android 4.1</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span></span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"openFileChoose(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)"</span>);</div><div class="line">            mUploadMessage = uploadMsg;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult( Intent.createChooser( i, <span class="string">"File Browser"</span> ), MainActivity.FILECHOOSER_RESULTCODE );</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// For Android 5.0+</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShowFileChooser</span> <span class="params">(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"onShowFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)"</span>);</div><div class="line">            mUploadCallbackAboveL = filePathCallback;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult(</div><div class="line">                    Intent.createChooser(i, <span class="string">"File Browser"</span>),</div><div class="line">                    FILECHOOSER_RESULTCODE);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后下一个版本来个大杂烩吧</p>
<h3 id="版本7"><a href="#版本7" class="headerlink" title="版本7"></a>版本7</h3><h4 id="1-大杂烩"><a href="#1-大杂烩" class="headerlink" title="1. 大杂烩"></a>1. 大杂烩</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"MainActivity"</span>;</div><div class="line">    <span class="keyword">private</span> WebView webView;</div><div class="line">    <span class="keyword">private</span> ValueCallback&lt;Uri&gt; mUploadMessage;</div><div class="line">    <span class="keyword">private</span> ValueCallback&lt;Uri[]&gt; mUploadCallbackAboveL;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FILECHOOSER_RESULTCODE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String url = <span class="string">"http://xxxx.com"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//初始化webView</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//从布局文件中扩展webView</span></div><div class="line">        webView=(WebView)<span class="keyword">this</span>.findViewById(R.id.webView);</div><div class="line">        WebSettings settings = webView.getSettings();</div><div class="line">        settings.setUseWideViewPort(<span class="keyword">true</span>);</div><div class="line">        settings.setLoadWithOverviewMode(<span class="keyword">true</span>);</div><div class="line">        settings.setDefaultTextEncodingName(<span class="string">"UTF-8"</span>);</div><div class="line">        <span class="comment">//开启JavaScript支持</span></div><div class="line">        settings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// 支持缩放</span></div><div class="line">        settings.setSupportZoom(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//辅助WebView设置处理关于页面跳转，页面请求等操作</span></div><div class="line">        webView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div><div class="line">        <span class="comment">//辅助WebView处理图片上传操作</span></div><div class="line">        webView.setWebChromeClient(<span class="keyword">new</span> MyChromeWebClient());</div><div class="line">        <span class="comment">//加载地址</span></div><div class="line">        webView.loadUrl(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initWebView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">        <span class="keyword">if</span>(requestCode==FILECHOOSER_RESULTCODE)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == mUploadMessage &amp;&amp; <span class="keyword">null</span> == mUploadCallbackAboveL) <span class="keyword">return</span>;</div><div class="line">            Uri result = data == <span class="keyword">null</span> || resultCode != RESULT_OK ? <span class="keyword">null</span> : data.getData();</div><div class="line">            <span class="keyword">if</span> (mUploadCallbackAboveL != <span class="keyword">null</span>) &#123;</div><div class="line">                onActivityResultAboveL(requestCode, resultCode, data);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>  <span class="keyword">if</span> (mUploadMessage != <span class="keyword">null</span>) &#123;</div><div class="line">                mUploadMessage.onReceiveValue(result);</div><div class="line">                mUploadMessage = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onActivityResultAboveL</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode != FILECHOOSER_RESULTCODE</div><div class="line">                || mUploadCallbackAboveL == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Uri[] results = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</div><div class="line">            <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                String dataString = data.getDataString();</div><div class="line">                ClipData clipData = data.getClipData();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (clipData != <span class="keyword">null</span>) &#123;</div><div class="line">                    results = <span class="keyword">new</span> Uri[clipData.getItemCount()];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clipData.getItemCount(); i++) &#123;</div><div class="line">                        ClipData.Item item = clipData.getItemAt(i);</div><div class="line">                        results[i] = item.getUri();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (dataString != <span class="keyword">null</span>)</div><div class="line">                    results = <span class="keyword">new</span> Uri[]&#123;Uri.parse(dataString)&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mUploadCallbackAboveL.onReceiveValue(results);</div><div class="line">        mUploadCallbackAboveL = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义 WebViewClient 辅助WebView设置处理关于页面跳转，页面请求等操作【处理tel协议和视频通讯请求url的拦截转发】</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(url.trim().startsWith(<span class="string">"tel"</span>))&#123;<span class="comment">//特殊情况tel，调用系统的拨号软件拨号【&lt;a href="tel:1111111111"&gt;1111111111&lt;/a&gt;】</span></div><div class="line">                Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">                i.setData(Uri.parse(url));</div><div class="line">                startActivity(i);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                String port = url.substring(url.lastIndexOf(<span class="string">":"</span>)+<span class="number">1</span>,url.lastIndexOf(<span class="string">"/"</span>));<span class="comment">//尝试要拦截的视频通讯url格式(808端口)：【http://xxxx:808/?roomName】</span></div><div class="line">                <span class="keyword">if</span>(port.equals(<span class="string">"808"</span>))&#123;<span class="comment">//特殊情况【若打开的链接是视频通讯地址格式则调用系统浏览器打开】</span></div><div class="line">                    Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">                    i.setData(Uri.parse(url));</div><div class="line">                    startActivity(i);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;<span class="comment">//其它非特殊情况全部放行</span></div><div class="line">                    view.loadUrl(url);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义 WebChromeClient 辅助WebView处理图片上传操作【&lt;input type=file&gt; 文件上传标签】</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyChromeWebClient</span> <span class="keyword">extends</span> <span class="title">WebChromeClient</span> </span>&#123;</div><div class="line">        <span class="comment">// For Android 3.0-</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg)</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"openFileChoose(ValueCallback&lt;Uri&gt; uploadMsg)"</span>);</div><div class="line">            mUploadMessage = uploadMsg;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// For Android 3.0+</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">( ValueCallback uploadMsg, String acceptType )</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"openFileChoose( ValueCallback uploadMsg, String acceptType )"</span>);</div><div class="line">            mUploadMessage = uploadMsg;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult(</div><div class="line">                    Intent.createChooser(i, <span class="string">"File Browser"</span>),</div><div class="line">                    FILECHOOSER_RESULTCODE);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//For Android 4.1</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span></span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"openFileChoose(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)"</span>);</div><div class="line">            mUploadMessage = uploadMsg;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult( Intent.createChooser( i, <span class="string">"File Browser"</span> ), MainActivity.FILECHOOSER_RESULTCODE );</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// For Android 5.0+</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onShowFileChooser</span> <span class="params">(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"onShowFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)"</span>);</div><div class="line">            mUploadCallbackAboveL = filePathCallback;</div><div class="line">            Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">            i.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">            i.setType(<span class="string">"*/*"</span>);</div><div class="line">            MainActivity.<span class="keyword">this</span>.startActivityForResult(</div><div class="line">                    Intent.createChooser(i, <span class="string">"File Browser"</span>),</div><div class="line">                    FILECHOOSER_RESULTCODE);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.saymagic.cn/2015/11/08/webview-upload.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://blog.saymagic.cn/2015/11/08/webview-upload.html?utm_source=tuicool&amp;utm_medium=referral</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Java泛型的小知识点]]></title>
      <url>https://bearsmall.github.io/2016/01/26/javase/2016-01-26-java-generic/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><ul>
<li>java不允许直接实例化一个泛型数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stack&lt;String&gt;[] a = <span class="keyword">new</span> Stack&lt;String&gt;[N];</div></pre></td></tr></table></figure>
<ul>
<li>上面这种写法是错误的！类似的还有下面这种！<a id="more"></a>
<img src="http://okv02t39e.bkt.clouddn.com/javase-genericity-1.png" alt="Eclipse Encoding Setting Page"></li>
</ul>
<h2 id="How-to"><a href="#How-to" class="headerlink" title="How to ?"></a>How to ?</h2><ul>
<li>Java如何创建一个字符串栈的数组？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stack&lt;String&gt;[] a = (Stack&lt;String&gt;) <span class="keyword">new</span> Stack[N];</div></pre></td></tr></table></figure>
<ul>
<li>强制类型转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedCapacityStack</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> Item[] a;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedCapacityStack</span><span class="params">(<span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">        <span class="comment">//报错，由于某些历史和技术原因，创建泛型数组在Java中是不允许的</span></div><div class="line">        <span class="comment">//a = new Item[cap];</span></div><div class="line"></div><div class="line">        <span class="comment">//正确！</span></div><div class="line">        a = (Item[]) <span class="keyword">new</span> Object[cap];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意：上面两种泛型类数组是有区别的！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[工厂模式坑爹题目]]></title>
      <url>https://bearsmall.github.io/2016/01/26/designPattern/2016-01-26-factory-pattern-problem/</url>
      <content type="html"><![CDATA[<h2 id="已知代码"><a href="#已知代码" class="headerlink" title="已知代码"></a>已知代码</h2><ul>
<li><p>Bean.java</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String beanName;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeanName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> beanName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String beanName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beanName = beanName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(String beanName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beanName = beanName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>BeanFactory.java</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BeanFactory instance = <span class="keyword">new</span> BeanFactory();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bean bean = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        bean = <span class="keyword">new</span> Bean(<span class="string">"mybean"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanFactory <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean <span class="title">getBean</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>App.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Bean bean = BeanFactory.getInstance().getBean();</div><div class="line">        System.out.println(bean.getBeanName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果【1】"><a href="#运行结果【1】" class="headerlink" title="运行结果【1】"></a>运行结果【1】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</div><div class="line">      at com.xy.factory_simple.App.main(App.java:<span class="number">6</span>)</div></pre></td></tr></table></figure>
<ul>
<li>更改BeanFactory.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BeanFactory instance = <span class="keyword">new</span> BeanFactory();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bean bean;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        bean = <span class="keyword">new</span> Bean(<span class="string">"mybean"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanFactory <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean <span class="title">getBean</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果【2】"><a href="#运行结果【2】" class="headerlink" title="运行结果【2】"></a>运行结果【2】</h3><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 更改BeanFactory.java</div><div class="line"></div><div class="line">```java</div><div class="line">    private static Bean bean = null;</div><div class="line">    private static BeanFactory instance = new BeanFactory();</div><div class="line">    public BeanFactory() &#123;</div><div class="line">        bean = new Bean(&quot;mybean&quot;);</div><div class="line">    &#125;</div><div class="line">    public static BeanFactory getInstance()&#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">    public static Bean getBean()&#123;</div><div class="line">        return bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果【3】"><a href="#运行结果【3】" class="headerlink" title="运行结果【3】"></a>运行结果【3】</h3><p><code>mybean</code></p>
<h2 id="你知道上面是为什么吗？"><a href="#你知道上面是为什么吗？" class="headerlink" title="你知道上面是为什么吗？"></a>你知道上面是为什么吗？</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Servlet中直接response.getWriter().write() 输出乱码解决！]]></title>
      <url>https://bearsmall.github.io/2016/01/26/javaweb/2016-01-26-Servlet-write-encoding/</url>
      <content type="html"><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul>
<li><p>项目编码：utf-8</p>
</li>
<li><p>页面编码：utf-8</p>
</li>
<li><p>请求类型：Post</p>
<a id="more"></a>
<h2 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h2></li>
</ul>
<h3 id="Servlet核心代码"><a href="#Servlet核心代码" class="headerlink" title="Servlet核心代码"></a>Servlet核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">System.out.println(username);<span class="comment">//控制台正确输出中文</span></div><div class="line">response.getWriter().write(username);<span class="comment">//页面中文乱码</span></div></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<p><img src="images/javaweb-servlet-encoding-settting-1.png" alt="Servlet Encoding Setting Page"></p>
<h2 id="Demo2："><a href="#Demo2：" class="headerlink" title="Demo2："></a>Demo2：</h2><h3 id="Servlet核心代码-1"><a href="#Servlet核心代码-1" class="headerlink" title="Servlet核心代码"></a>Servlet核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">System.out.println(username);</div><div class="line">request.setAttribute(<span class="string">"username"</span>, username);</div><div class="line">request.getRequestDispatcher(<span class="string">"result.jsp"</span>).forward(request, response);</div></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<p><img src="images/javaweb-servlet-encoding-settting-2.png" alt="Servlet Encoding Setting Page"></p>
<h2 id="Demo3"><a href="#Demo3" class="headerlink" title="Demo3:"></a>Demo3:</h2><h3 id="Servlet核心代码-2"><a href="#Servlet核心代码-2" class="headerlink" title="Servlet核心代码"></a>Servlet核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line">System.out.println(username);</div><div class="line">response.getWriter().write(username);</div></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<p><img src="images/javaweb-servlet-encoding-settting-3.png" alt="Servlet Encoding Setting Page"></p>
<ul>
<li>思考？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">为什么Demo1会出现乱码？而Demo2没有出现乱码？</div><div class="line">明明Demo1的response也设置了utf-8编码。</div></pre></td></tr></table></figure>
<ul>
<li>Demo1乱码的原因</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">从控制台输出可以看出，控制台并没有乱码，只是response在输出中文的</div><div class="line">时候出现了乱码，因此，这行代码：response.setCharacterEncoding(“UTF-8”);</div><div class="line">可能并没有起到想要的效果。</div><div class="line">反观Demo2，并没有response.setCharacterEncoding(“UTF-8”); 这句话，但是输出的</div><div class="line">页面是通过request的转发到JSP页面实现的。其实JSP页面最后也要转换为Servlet</div><div class="line">页面中的元素也是response.getWriter().write(“”);出来的。既然有response，那么</div><div class="line">这个response的编码是如何确定的呢？我们看一看JSP与对应的Servlet就可以明白了：</div></pre></td></tr></table></figure>
<p><img src="images/javaweb-servlet-encoding-settting-4.png" alt="Servlet Encoding Setting Page"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">也就是说Demo2中的response.setCharacterEncoding隐藏在JSP页面中了。</div><div class="line">然后根据转换后的Servlet可以看出response.setContentType(“text/html;charset=utf-8”);</div><div class="line">才能达到应有的效果,在使用http协议的情况中，该方法设置 Content-type实体报头</div><div class="line">response.setContentType()的作用是使客户端浏览器，区分不同种类的数据，并根据不</div><div class="line">同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</div><div class="line">例如：web浏览器就是通过MIME类型来判断文件是GIF图片，通过MIME类型来处理json字符串。</div><div class="line">Tomcat的安装目录\conf\web.xml 中就定义了大量MIME类型 ，可以参考。</div><div class="line">response.setContentType(“text/html; charset=utf-8”); html</div><div class="line">response.setContentType(“text/plain; charset=utf-8”); 文本</div><div class="line">response.setContentType(“text/JavaScript; charset=utf-8”); json数据</div><div class="line">response.setContentType(“application/xml; charset=utf-8”); xml数据</div></pre></td></tr></table></figure>
<h3 id="因此Demo3正是解决Demo1乱码的方法！"><a href="#因此Demo3正是解决Demo1乱码的方法！" class="headerlink" title="因此Demo3正是解决Demo1乱码的方法！"></a>因此Demo3正是解决Demo1乱码的方法！</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分页求总页数]]></title>
      <url>https://bearsmall.github.io/2016/01/21/tool/2016-01-21-page-seperate/</url>
      <content type="html"><![CDATA[<h3 id="小问题直接上代码比较清晰明了"><a href="#小问题直接上代码比较清晰明了" class="headerlink" title="小问题直接上代码比较清晰明了"></a>小问题直接上代码比较清晰明了</h3><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageModel</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage = <span class="number">1</span>;<span class="comment">// 当前页</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">10</span>;<span class="comment">// 每页大小</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCount = <span class="number">0</span>;<span class="comment">// 总记录数</span></div><div class="line">    <span class="comment">//private int totalPage ;// 总页数</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> currentPage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPage</span><span class="params">(<span class="keyword">int</span> currentPage)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.currentPage = currentPage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> totalCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.totalCount = totalCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 方法一</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage0</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (totalCount + pageSize - <span class="number">1</span>) / pageSize;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 方法二</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (totalCount - <span class="number">1</span>) / pageSize + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 方法三</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p = totalCount / pageSize;</div><div class="line">        <span class="keyword">if</span> (totalCount % pageSize == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> p + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 方法四</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage3</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> p = totalCount / pageSize;</div><div class="line">        <span class="keyword">if</span> (totalCount % pageSize != <span class="number">0</span>)</div><div class="line">            p++;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>说是四种其实也就两种。。。。。。</p>
</li>
<li><p>其中，前面两个写起来比较简单，后面两种比较传统。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery+Struts2实现ajax局部刷新分页]]></title>
      <url>https://bearsmall.github.io/2016/01/02/javaweb/2016-01-2-jquery-struts2-ajax/</url>
      <content type="html"><![CDATA[<h2 id="传统的分页"><a href="#传统的分页" class="headerlink" title="传统的分页"></a>传统的分页</h2><p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-1.png" alt="jquery struts2 ajax"></p>
<ul>
<li>从URL中很明显的看出了分页的技术点，两个参数：一个是当前页page一个是页面大小size<br>我们甚至可以直接修改URL中的参数来跳转到相应的页面。下面几个按钮也是比较常见的。<a id="more"></a>
<h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3></li>
</ul>
<p>我简单总结一下：</p>
<ol>
<li>get请求参数在url中，虽然也不是什么敏感的信息，但是一旦哪个用户传递过来的不是整数，<br>你后台要是不做处理肯定NumberFormatException！</li>
<li>当换页的时候，后台处理请求然后将页面需要的数据准备好，再转到页面,然后数据填充到页面，<br>渲染页面，一个分页就需要将整个页面重新绘制一遍。要是页面就一张table还好说。但是如果页面<br>中有其它数据，你得从后台再获取一遍（虽然前后并没有什么变化）。再者，如果页面中有很多类似<br>的table你得在分页的同时保持其它table的状态信息（比如说其它table现在在第几页什么的，如果分页<br>后其它table的状态信息没有被保存，而是统一回到第一页，那体验是很不好的。）</li>
</ol>
<h2 id="分页的实质"><a href="#分页的实质" class="headerlink" title="分页的实质"></a>分页的实质</h2><ul>
<li>分页我们原本只需要关心当前table中的数据更新，我们并不想”多管闲事“。当我切换页面的时候只<br>需要后台将”当前页“的数据替换成最新的数据，其它页面元素不需要多的变动。ajax局部刷新技术<br>正好可以解决这个问题。</li>
</ul>
<h3 id="ajax局部刷新"><a href="#ajax局部刷新" class="headerlink" title="ajax局部刷新"></a>ajax局部刷新</h3><p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-2.png" alt="jquery struts2 ajax"></p>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-3.png" alt="jquery struts2 ajax"></p>
<ul>
<li>可以看到虽然切换了页面，但是URL并没有改变。而且不像前面的get请求那样，这里页面不会刷，只改变<br>局部数据。</li>
</ul>
<h2 id="整合jquery-twbsPagination-js"><a href="#整合jquery-twbsPagination-js" class="headerlink" title="整合jquery.twbsPagination.js"></a>整合jquery.twbsPagination.js</h2><p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-4.png" alt="jquery struts2 ajax"></p>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-5.png" alt="jquery struts2 ajax"></p>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-6.png" alt="jquery struts2 ajax"></p>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-jquery-struts2-ajax-7.png" alt="jquery struts2 ajax"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVAWEB之自定义TAG开发二]]></title>
      <url>https://bearsmall.github.io/2015/11/30/javaweb/2015-11-30-define-tag2/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上一篇我们讲了如何使用TAG简化我们的basePath获取，现在我们再来谈谈TAG另外的一个用处，使用场景说明：很多时候，我们从后台获取的时间参数（从数据库中读取的）是这种格式的：19941230123033，然而我们需要的却是这种格式的：<br><a id="more"></a></p>
<ul>
<li>1994年12月30日12时30分33秒</li>
<li>1994年12月30日12时30分</li>
<li>1994年12月30日</li>
<li>12时30分33秒</li>
</ul>
<p>可谓是多种多样，按照我们常规的处理方式，我们直接在设计页面的时候就确定好页面需要显示的具体格式，然后让后台去转化为我们需要的格式不就好了吗，但是正如你所看到的，也许同一个时间日期参数在一个页面需要显示多种格式，再或者当这种格式容易发生变化的时候，上面那种处理方式显然是吃力不讨好的。下面我们借用Tag的技巧来解决这个问题：</p>
<h2 id="自定义Tag"><a href="#自定义Tag" class="headerlink" title="自定义Tag"></a>自定义Tag</h2><p>【借助上一章的工程】</p>
<h3 id="tool-tdl文件"><a href="#tool-tdl文件" class="headerlink" title="tool.tdl文件"></a>tool.tdl文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>base<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>basePath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.xy.tag.BasePathTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>timeFormat<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.xy.tag.TimeFormatTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>date<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span><span class="comment">&lt;!-- 是否必填 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span><span class="comment">&lt;!-- 是否能够以$&#123;&#125;方式传值 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>pattern<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!-- 字段索引名 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span><span class="comment">&lt;!-- 是否必填 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>false<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span><span class="comment">&lt;!-- 是否能够以$&#123;&#125;方式传值 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>说明一下：<figure class="highlight plain"><figcaption><span>是否必填 -->指的是是否可以传入动态值（即后台传过来的数据，例如$&#123;&#125;方式的el表达式形式）</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### TimeFormatTag类</div><div class="line"></div><div class="line">```java</div><div class="line">package com.xy.tag;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line">import java.text.ParseException;</div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import javax.servlet.jsp.JspException;</div><div class="line">import javax.servlet.jsp.JspWriter;</div><div class="line">import javax.servlet.jsp.tagext.TagSupport;</div><div class="line"></div><div class="line">public class TimeFormatTag extends TagSupport &#123;</div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    private String date;</div><div class="line">    private String pattern;</div><div class="line"></div><div class="line">    public String getDate() &#123;</div><div class="line">        return date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDate(String date) &#123;</div><div class="line">        this.date = date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getPattern() &#123;</div><div class="line">        return pattern;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPattern(String pattern) &#123;</div><div class="line">        this.pattern = pattern;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int doEndTag() throws JspException &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int doStartTag() throws JspException &#123;</div><div class="line">        JspWriter jspw = this.pageContext.getOut();</div><div class="line">        Date d = null;</div><div class="line">        String fin = &quot;&quot;;</div><div class="line">        SimpleDateFormat from = null;</div><div class="line">        SimpleDateFormat to = new SimpleDateFormat(pattern);</div><div class="line">        try &#123;</div><div class="line">            switch (date.length()) &#123;</div><div class="line">            case 12:</div><div class="line">                from = new SimpleDateFormat(&quot;yyyyMMddHHmm&quot;);</div><div class="line">            case 14:</div><div class="line">                from = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);</div><div class="line">            &#125;</div><div class="line">            d = from.parse(date);</div><div class="line">            fin = to.format(d);</div><div class="line">            jspw.print(fin);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (ParseException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
<h3 id="index-jsp页面"><a href="#index-jsp页面" class="headerlink" title="index.jsp页面"></a>index.jsp页面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Cfg:basePath</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    19941230123033的格式化<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Cfg:timeFormat</span> <span class="attr">date</span>=<span class="string">"19941230123033"</span> <span class="attr">pattern</span>=<span class="string">"yyyy年MM月dd日hh时mm分ss秒"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cfg:timeFormat</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Cfg:timeFormat</span> <span class="attr">date</span>=<span class="string">"19941230123033"</span> <span class="attr">pattern</span>=<span class="string">"yyyy年MM月dd日hh时mm分"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cfg:timeFormat</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Cfg:timeFormat</span> <span class="attr">date</span>=<span class="string">"19941230123033"</span> <span class="attr">pattern</span>=<span class="string">"yyyy年MM月dd日"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cfg:timeFormat</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Cfg:timeFormat</span> <span class="attr">date</span>=<span class="string">"19941230123033"</span> <span class="attr">pattern</span>=<span class="string">"hh时mm分ss秒"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cfg:timeFormat</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-tags-two-1.png" alt="javaweb tag two"></p>
<ul>
<li>好了，一个可变格式的转换器就完成了，使用起来还是很方便的，【可以自己尝试一下动态数据】。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVAWEB之自定义TAG开发]]></title>
      <url>https://bearsmall.github.io/2015/11/30/javaweb/2015-11-30-define-tag/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在javaweb开发中我们可能经常会用到basePath这个参数，没错，当我们新建一个jsp页面的时候，myeclipse会自动帮我们生成下面这段代码：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</div><div class="line">%&gt;</div></pre></td></tr></table></figure></p>
<h2 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h2><p>起初也许你看他不爽，后来发现这个东西确实很有用哦，但是我们仔细数了数这代码行数有点多，而且还是jsp页面嵌套Java代码实现的，看起来有些不伦不类（话又说回来，这个用肯定是没有问题的）。</p>
<p>现在我们想把这段代码抽离出来，用更简洁的方式实现同样的功能，即提供basePath参数。我们知道jsp页面中的jstl标签库功能强大，我们只需要在jsp页面引入这么一条代码就可以使用功能如此强大的标签。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</div></pre></td></tr></table></figure>
<p>同样的，我们打算也用这种方式实现，不过jstl标签库中并没有提供basePath参数，不然也不用我们在这大费周章自定义Tag了。好了废话不多说。我们来实际操作吧：</p>
<ul>
<li>新建一个WebProject，名字自己定，这里我用Tag</li>
<li>然后我们新建一个文件夹用来存放自定义标签文件（.tld文件），名字自己定，这里我就用WEB-TAG了</li>
<li>新建一个tld文件，名字自己定，这里我就用tools.tld了</li>
<li>taglib标签的内容如下：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;taglib&gt;</div><div class="line">    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;</div><div class="line">    &lt;jsp-version&gt;1.2&lt;/jsp-version&gt;</div><div class="line">    &lt;short-name&gt;base&lt;/short-name&gt;</div><div class="line">    &lt;tag&gt;</div><div class="line">        &lt;name&gt;basePath&lt;/name&gt;</div><div class="line">        &lt;tag-class&gt;com.xy.tag.BasePathTag&lt;/t`ag-class&gt;</div><div class="line">        &lt;body-content&gt;jsp&lt;/body-content&gt;</div><div class="line">    &lt;/tag&gt;</div><div class="line">&lt;/taglib&gt;</div></pre></td></tr></table></figure>
<ul>
<li>新建一个类BasePathTag 继承自TagSupport</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xy.tag;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.JspWriter;</div><div class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.TagSupport;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePathTag</span> <span class="keyword">extends</span> <span class="title">TagSupport</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doEndTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doStartTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException </span>&#123;</div><div class="line">        HttpServletRequest request = (HttpServletRequest)<span class="keyword">this</span>.pageContext.getRequest();</div><div class="line">        String path = request.getContextPath();</div><div class="line">        String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</div><div class="line">        JspWriter jspw = <span class="keyword">this</span>.pageContext.getOut();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jspw.print(basePath);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>是不是在这里看到了这两行熟悉的语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + path + <span class="string">"/"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>没错，我们在这里获取到了basePath参数，并借助JspWriter写到jsp页面，以什么方式写呢？当然是标签的形式，看看我们的tools.tdl文件，不能猜出是其中的basePath这个标签吧，毕竟我在里面就写了一个tag。。。。。。<br>ok，准备工作基本上做好了，下面我们开始在jsp页面中测试效果，打开项目的index.jsp页面，在最上面加入下面这行语句（就和引入jstl标签库一样）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=<span class="string">"Cfg"</span> uri=<span class="string">"/WEB-TAG/tools.tld"</span> %&gt;</div></pre></td></tr></table></figure>
<ul>
<li>简单说一下里面的两个参数，prefix指的是前缀，也就是我们使用标签的时候的前缀，uri指的是我们的标签库文件路径。具体说我们如何使用就是下面这段代码了：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Cfg:basePath/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>你没有看错，就是这么简单！现在我们可以删除jsp文件中的那五行代码了。运行后即可正确显示：</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-tag-1.png" alt="Struts2 Json format"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用ApacheBench对网站进行压力测试]]></title>
      <url>https://bearsmall.github.io/2015/11/29/tool/2015-11-29-ApacheBench-Testing/</url>
      <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><ul>
<li><p>网站发布了，性能怎么样呢？是时候测试一下了</p>
</li>
<li><p>Apache服务器下载地址：<a href="http://www.apache.org/" target="_blank" rel="external">http://www.apache.org/</a></p>
<a id="more"></a>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2></li>
</ul>
<p>当我们安装Apache服务器之后，我们在其bin目录下可以看到一个ab.exe，的确ApacheBench（ab）是Apache附带的一个小工具，专门用来做HTTP服务器的BenchMark Testing的。</p>
<ul>
<li><p>ok,下面我们以淘宝网为测试对象说明一下这个ab到底是如何使用的。（window下）</p>
</li>
<li><p>打开cmd控制台，切换到ab.exe路径下。执行下面这条命令：</p>
<figure class="highlight plain"><figcaption><span>-n 1000 -c 10</span><a href="http://www.taobao.com/```" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    【-n表示发送的请求数，这里发送1000次请求，-c表示每次的并发数，这里设置为10，注意后面的/不要掉了！】</div><div class="line"></div><div class="line">- 下面是输出的一堆信息：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>C:\server\Apache24\bin&gt;ab -n 1000 -c 10 <a href="http://www.taobao.com/" target="_blank" rel="external">http://www.taobao.com/</a><br>This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, <a href="http://www.zeustech.net/" target="_blank" rel="external">http://www.zeustech.net/</a><br>Licensed to The Apache Software Foundation, <a href="http://www.apache.org/" target="_blank" rel="external">http://www.apache.org/</a></p>
<p>Benchmarking www.taobao.com (be patient)<br>Completed 100 requests<br>Completed 200 requests<br>Completed 300 requests<br>Completed 400 requests<br>Completed 500 requests<br>Completed 600 requests<br>Completed 700 requests<br>Completed 800 requests<br>Completed 900 requests<br>Completed 1000 requests<br>Finished 1000 requests                   //1000次请求结束</p>
<p>Server Software:        Tengine          //淘宝网使用的web服务器<br>Server Hostname:        www.taobao.com   //域名<br>Server Port:            80       //端口号</p>
<p>Document Path:          /                //请求的路径，这里是根路径<br>Document Length:        258 bytes        //第一次返回的文档的大小，大小发生改变，这个响应会视为一个错误。</p>
<p>Concurrency Level:      10               //并发数，也就是我们前面设置的-c参数值<br>Time taken for tests:   54.977 seconds   //这1000次请求一共花费的时间是54.977秒<br>Complete requests:      1000             //成功的请求次数<br>Failed requests:        2                //失败的请求次数<br>   (Connect: 2, Receive: 0, Length: 0, Exceptions: 0)                           //连接失败，接收异常，长得异常，读取失败<br>Non-2xx responses:      1000<br>Total transferred:      560000 bytes     //从服务器接收的字节数。<br>HTML transferred:       258000 bytes     //html内容字节数<br>Requests per second:    18.19 [#/sec] (mean) //没秒请求数<br>Time per request:       549.766 [ms] (mean)  //每个并发的时间<br>Time per request:       54.977 [ms] (mean, across all concurrent requests)              //每次并发中，每个请求的时间<br>Transfer rate:          9.95 [Kbytes/sec]   received  //没秒的网络传输量</p>
<p>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        8   13   4.0     12      55   //socket从发送请求到建立连接所花费的时间<br>Processing:    10  494 2796.3    109   21385   //建立连接后，直到http全部接收所用的时间<br>Waiting:        9  334 2290.8     78   21115<br>//发送HTTP后，到接收到第一个字节所等待的时间<br>Total:         26  507 2796.2    121   21399<br>//connect+processing的时间</p>
<p>//对于整个1000个请求来说，50%的请求的响应时间在121毫秒内，60%的请求响应时间在126毫秒内，….，最长的请求响应时间为21399毫秒<br>Percentage of the requests served within a certain time (ms)<br>  50%    121<br>  66%    126<br>  75%    130<br>  80%    133<br>  90%    154<br>  95%    185<br>  98%   1082<br>  99%  21128<br> 100%  21399 (longest request)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 参数信息</div><div class="line"></div><div class="line">- 下面看看 ApacheBench有哪些参数，输入```ab -help```即可查看。</div></pre></td></tr></table></figure></p>
<p>C:\server\Apache24\bin&gt;ab -help<br>Usage: ab [options] [<a href="http://]hostname[:port]/path" target="_blank" rel="external">http://]hostname[:port]/path</a><br>Options are:<br>-n requests Number of requests to perform<br>-c concurrency Number of multiple requests to make at a time<br>-t timelimit Seconds to max. to spend on benchmarking<br>This implies -n 50000<br>-s timeout Seconds to max. wait for each response<br>Default is 30 seconds<br>-b windowsize Size of TCP send/receive buffer, in bytes<br>-B address Address to bind to when making outgoing connections<br>-p postfile File containing data to POST. Remember also to set -T<br>-u putfile File containing data to PUT. Remember also to set -T<br>-T content-type Content-type header to use for POST/PUT data, eg.<br>‘application/x-www-form-urlencoded’<br>Default is ‘text/plain’<br>-v verbosity How much troubleshooting info to print<br>-w Print out results in HTML tables<br>-i Use HEAD instead of GET<br>-x attributes String to insert as table attributes<br>-y attributes String to insert as tr attributes<br>-z attributes String to insert as td or th attributes<br>-C attribute Add cookie, eg. ‘Apache=1234’. (repeatable)<br>-H attribute Add Arbitrary header line, eg. ‘Accept-Encoding: gzip’<br>Inserted after all normal header lines. (repeatable)<br>-A attribute Add Basic WWW Authentication, the attributes<br>are a colon separated username and password.<br>-P attribute Add Basic Proxy Authentication, the attributes<br>are a colon separated username and password.<br>-X proxy:port Proxyserver and port number to use<br>-V Print version number and exit<br>-k Use HTTP KeepAlive feature<br>-d Do not show percentiles served table.<br>-S Do not show confidence estimators and warnings.<br>-q Do not show progress when doing more than 150 requests<br>-l Accept variable document length (use this for dynamic pages)<br>-g filename Output collected data to gnuplot format file.<br>-e filename Output CSV file with percentages served<br>-r Don’t exit on socket receive errors.<br>-m method Method name<br>-h Display usage information (this message)<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[入栈出栈规律]]></title>
      <url>https://bearsmall.github.io/2015/11/08/dataStructure/2015-11-08-stack-in-out-law/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="题引"><a href="#题引" class="headerlink" title="题引"></a>题引</h3><ul>
<li>已知入栈序列为：1 2 3 4 5，这5个数依次入栈，出栈顺序、时机任意。<br>则下列可能的出栈序列不正确的是（）<ul>
<li>A 1 2 3 4 5</li>
<li>B 3 2 1 5 4</li>
<li>C 1 5 4 3 2</li>
<li>D 4 3 5 1 2<a id="more"></a></li>
</ul>
</li>
<li><p>这种题目，相信给你一分钟心算一下就可以出来了。然而，当规模增加到10个数，20个数，估计你花费的时间会成指数增长。但是我现在想在10秒之内做出来，不管是5个数还是10个数，或者20个数。那么怎么办呢？</p>
</li>
<li><p>好吧，废话不多说，我其实就是分享做这类题目的技巧和规律。。。。。。</p>
</li>
</ul>
<h3 id="规律总结"><a href="#规律总结" class="headerlink" title="规律总结"></a>规律总结</h3><ul>
<li>已知栈的输入序列是1,2,3,…,n，输出序列是a1,a2,…ai,…,an。</li>
<li>然后我们任选一个数ai，并筛选ai到an之间所有&lt;=ai的元素，则它们一定是按照从大到小的顺序排列的。*</li>
<li>（“从大到小“不一定紧紧相邻，只代表相对位置关系，比如(…，10，…，7，…，3，…，1，…）</li>
</ul>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul>
<li>入栈顺序：1 2 3 4 5 【n=5】</li>
<li>出栈顺序：3 2 1 5 4</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li>让i=1，那么ai=3,后面小于3的有2,1。刚好3,2,1是按照从大到小的顺序排列的</li>
<li>让i=2，那么ai=2,后面小于2的有1。刚好2,1是按照从大到小的顺序排列的</li>
<li>让i=3，那么ai=1,后面小于1的有NULL，满足。</li>
<li>让i=4，那么ai=5,后面小于5的有4。刚好5,4是按照从大到小的顺序排列的</li>
<li>让i=5，那么ai=4,后面小于4的有NULL，满足。</li>
</ul>
<h3 id="讲一讲原理"><a href="#讲一讲原理" class="headerlink" title="讲一讲原理"></a>讲一讲原理</h3><ul>
<li>最理想的情况下，从小到大入栈，从大到小出栈，但是因为出栈是随机的，也就是在入栈还没结束的情况下就可以出栈。这样，就会出现一些小的数提前出栈的现象。但是那些“守规矩”的小数相对位置是没有变化的。比如入栈12345，结果在4入栈之前3不听话先出去了。但是这不会影响12的顺序，12的相对顺序还是保持着 12入栈，21出栈。因为12是守规矩的。</li>
</ul>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><ul>
<li>当然实际做题的时候规律掌握了扫一眼就可以判断那些是错误的了。</li>
<li><p>【注；这些规律一般用来排除不满足的选项，因为这个不是充分条件】</p>
</li>
<li><p>可能会有这样的疑问：上面的规律前提都是输入序列为：1,2,3,…n这种递增的形式的，<br>如果哪天入栈序列改了，变成：n,n-1,…3,2,1，那规律难道都不适用了？还有就是输入的序列不是这些简单的数字，而是一些字母,数字等的混合形式，难道我又只能呵呵了。</p>
</li>
</ul>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>一句话：你先给它们每个元素（不管是数字还是字符串）标个序号，后面直接对序号操作就OK了【按照1,2,3,…,n的顺序】。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HttpClient发送请求后得到的响应内容出现部分乱码的问题]]></title>
      <url>https://bearsmall.github.io/2015/10/26/javase/2015-10-26-java-httpclient-encoding/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>几天爬虫出现了一个问题，用HttpClient不管是发送的Post请求还是Get请求一直出现一个问题：<br>得到的响应内容部分乱码，请注意我的措辞，是部分乱码，一小部分，一小部分，一小部分！！！<br><a id="more"></a></p>
<h3 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">package</span> com.springapp.parse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by BearSmall on 2015/10/26.</div><div class="line"> * 响应工具类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtils</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回响应正文(有乱码)</div><div class="line">     * <span class="doctag">@param</span> response</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getResponseString</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        HttpEntity entity = response.getEntity();<span class="comment">//响应实体类</span></div><div class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();<span class="comment">//响应正文</span></div><div class="line">        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">            String charset = getContentCharSet(entity);</div><div class="line">            InputStream instream = entity.getContent();</div><div class="line"></div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">                    instream));</div><div class="line">            String temp = <span class="string">""</span>;</div><div class="line">            <span class="keyword">while</span> ((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                String str = <span class="keyword">new</span> String(temp.getBytes(), <span class="string">"UTF-8"</span>);</div><div class="line">                result.append(str+<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>发现这段代码出现了乱码问题，已知的情况是：响应的正文是utf-8格式的。出问题的地方也是这个位子。由于对Java编码解码理解得不是太透彻，试过很多笨办法，果然解决了部分乱码问题，但是来了个全部乱码。。。。。。。果然是个冷笑话。本来打算就这样了，反正影响不是特别大，但是越往后面这个问题越来越明显。基本上爬下来的大一点的页面都会零零散散的出现乱码现象，很是讨人嫌。</p>
</li>
<li><p>最后发现了问题的症结所在，这里跟大家分享一下：</p>
</li>
</ul>
<p>从代码上看，没有逻辑上的错误。我们就看看细节吧。<br>首先从响应对象response中得到InputStream 流。然后包装成BufferredReader对象。最后一行一行的读取。但是这样读取的字符串会出现乱码，于是我们从新对读到的每一行字符串重新编码，设置成和inputstream匹配的utf-8。<br>大面积乱码确实不见了，但是却出现小面积的乱码。。。。。。</p>
<p>我们再仔细想一想，我们已经知道inputStream的编码格式为utf-8，那为什么要在最后字符串都一行行读取出来了的情况下将其转化呢？<br>难道不能用另外的方式实现处理这个utf-8,让读出来的一行行的字符串就不存在乱码，这样就省得我们一行行的去重新编码。</p>
<p>果然，看过InputStreamReader的构造函数后，我们发现它有一个两个参数的构造函数，另一个参数就是用来指定字符集的。于是我们果断用上。</p>
<h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.springapp.parse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by BearSmall on 2015/10/26.</div><div class="line"> * 响应工具类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtils</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回响应正文(无乱码)</div><div class="line">     * <span class="doctag">@param</span> response</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getResponseString</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        HttpEntity entity = response.getEntity();<span class="comment">//响应实体类</span></div><div class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();<span class="comment">//响应正文</span></div><div class="line">        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">            String charset = getContentCharSet(entity);</div><div class="line">            InputStream instream = entity.getContent();</div><div class="line"></div><div class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">                    instream,<span class="string">"utf-8"</span>));</div><div class="line">            String temp = <span class="string">""</span>;</div><div class="line">            <span class="keyword">while</span> ((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                result.append(temp+<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.springapp.parse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by BearSmall on 2015/10/26.</div><div class="line"> * 响应工具类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtils</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回响应正文(无乱码)</div><div class="line">     * <span class="doctag">@param</span> response</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getResponseString</span><span class="params">(HttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        HttpEntity entity = response.getEntity();<span class="comment">//响应实体类</span></div><div class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();<span class="comment">//响应正文</span></div><div class="line">        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">            InputStream instream = entity.getContent();</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</div><div class="line">            <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> ((size = instream.read(bytes)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                    String str = <span class="keyword">new</span> String(bytes, <span class="number">0</span>, size, <span class="string">"utf-8"</span>);</div><div class="line">                    result.append(str);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    instream.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里由于没有使用包装类，所以需要自己编码解码。但是这里和第一个那种出现乱码的方式还是有区别的。</li>
<li>虽然都是自己编码解码，但是这里是对纯的inputStream进行的操作，中间不涉及包装类的额外编码附操作。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA文件操作之默认字符集编码]]></title>
      <url>https://bearsmall.github.io/2015/10/26/javase/2015-10-26-java-file-operation/</url>
      <content type="html"><![CDATA[<h2 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h2><ul>
<li><p>我们知道，在一些文件操作，特别是涉及到编码的时候，很让人心烦。</p>
</li>
<li><p>为什么呢？因为编码解码不一致容易出现乱码啊。。。。。。然而很多时候我们只顾及到了编码或者只顾及到解码。所以这种情况下就只能作死的一个个的试常见的编码格式。</p>
<a id="more"></a>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xy.file;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUTF_8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        String str = getClass().getResource(<span class="string">"/"</span>).getFile().toString();</div><div class="line">        str = System.getProperty(<span class="string">"user.dir"</span>);</div><div class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">                <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(str + File.separator</div><div class="line">                        + <span class="string">"file/file1.txt"</span>))));</div><div class="line">        String temp = <span class="string">""</span>;</div><div class="line">        <span class="keyword">while</span> ((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            result+=temp+<span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">        System.out.println(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>【注】这里有一个文件：工程目录下/file/file1.txt。编码格式为utf-8（文件编码格式信息很重要）<br>文件内容如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">计算机科学  与技术学院</div><div class="line">abc</div><div class="line">()（）【】</div></pre></td></tr></table></figure>
<ul>
<li>我们再来看一看打印输出的结果。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">璁＄畻鏈虹瀛?  涓庢妧鏈闄?</div><div class="line">abc</div><div class="line">()锛堬級銆愩??</div></pre></td></tr></table></figure>
<ul>
<li>果然乱了。     下面看一看解决方法</li>
</ul>
<h3 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> ((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            String s = <span class="keyword">new</span> String(temp.getBytes(), <span class="string">"utf-8"</span>);</div><div class="line">            result+=s+<span class="string">"\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们仅仅修改了while循环中的语句，把每次读取的一行信息重新编码，设置成utf-8。果然成功了。但是你知道这个过程究竟是怎么进行的吗？<br> 前面我们在包装文件对象的时候用到了InputStreamReader，构造函数中使用了只带一个参数的构造函数。查看jdk文档或者源代码可以看到，这个时候会采用jvm默认的编码格式进行编码。那么问题来了，在运行这个程序的时候你知道jvm到底采用的什么编码格式呢？并且随着具体环境的不同可能这个默认的编码格式就会改变。我们可以在eclipse上简单的模拟一下修改jvm默认编码的效果。右键项目–&gt;properties–&gt;Resource–&gt;TextFileEncoding<br> 默认的是GBK，如果你没有改过的话。这样我们改来改去，发现对输出的结果没有影响啊？？？你在逗我吗？不是说改变了jvm的默认编码吗？怎么结果都一样。</p>
<ul>
<li>我们拿gbk为例子，看while循环中的语句：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="keyword">new</span> String(temp.getBytes(), <span class="string">"utf-8"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>这句代码简单明了，把原来的字符串以utf-8的形式重新编码。</p>
</li>
<li><p>话是这么说，但是你知道这条代码其实包括两部分吗？</p>
<ul>
<li>第一：temp字符串解码为bytes数组。</li>
<li>第二：解码后的数组从新编码为新的字符串。</li>
</ul>
</li>
<li><p>问题来了，既然涉及到了编码和解码，那么他们分别采用什么字符集进行的呢？毕竟我们只看到一个utf-8。难道都是采用utf-8?</p>
</li>
<li><p>no，由String的构造函数可知编码是采用的utf-8没错。</p>
</li>
<li><p>但是解码的话其实和上面的InputStreamReader类似，采用的是jvm默认的编码格式（这里即为GBK）。好的，有点乱对吧，下面我们好好理一理。</p>
</li>
<li><p>file1.txt【文件格式：UTF-8】–&gt;封装的FileInputStream【编码，系统默认GBK】–&gt;每一行对应的temp字符串【解码，系统默认GBK】–&gt;新串s【编码，UTF-8】。没错，你发现它其实是饶了一圈又绕回来了。。。。。。。</p>
</li>
<li><p>但是不要以为这样做很好，确实很多情况下没有显现出问题出来，但是其实这是有问题的。打个比方：你把水从杯子A全部倒进另一个杯子B里面，然后再从B倒回A。你觉得最后水是一样的吗？（暂且不考虑杯子上面沾上点水）。答案是不确定的。例如当杯子A比杯子B小，这个时候没有问题，或者杯子A比杯子B大，但是水比较少，杯子B能容纳得下。但是还有这种情况啊：杯子A比杯子B大，不巧A中装的水比较多，杯子B装不下。这个时候就会有水溢出。希望这个例子类比乱码对你有所帮助。</p>
</li>
<li><p>既然有问题，那么什么才是好的解决方法呢？</p>
</li>
<li><p>看看下面更改的代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">             <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(str + File.separator</div><div class="line">                     + <span class="string">"file/file1.txt"</span>)),<span class="string">"utf-8"</span>));</div></pre></td></tr></table></figure>
<ul>
<li>没错，在构造InputStreamReader的时候就指定了编码方式（和文件的编码方式保持了一致）。其它代码不改动。<br>运行看看。</li>
</ul>
<figure class="highlight plain"><figcaption><span>与技术学院</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">abc</div><div class="line">()（）【】</div></pre></td></tr></table></figure>
<p>乱码消失了。</p>
<ul>
<li>对比这两种方式，会发现第二种方式更好。因为它不会出现不必要的重复编码，解码的操作，这会导致数据丢失，从而导致乱码。<br>而且这种方式会不经意的提醒你：我的文件到底是什么编码格式的？这条信息非常重要！</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse、IDEA环境下设置jvm默认编码]]></title>
      <url>https://bearsmall.github.io/2015/10/26/tool/2015-10-26-jvm-setting/</url>
      <content type="html"><![CDATA[<h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(System.getProperty(<span class="string">"file.encoding"</span>));</div><div class="line">        System.out.println(Charset.defaultCharset().name());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><p>打印结果是什么？</p>
</li>
<li><p>是GBK吧</p>
</li>
<li><p>估计大多数人的机器打印的结果是GBK，因为我们很多人系统默认编码就是GBK（In China）.</p>
</li>
<li><p>我们查看jdk文档可以看到：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Java.nio.charset.Charset</span></div><div class="line"><span class="function"><span class="keyword">static</span> Charset <span class="title">defaultCharset</span><span class="params">()</span></span></div><div class="line">Returns the <span class="keyword">default</span> charset of <span class="keyword">this</span> Java virtual machine.</div><div class="line"><span class="comment">//java.lang.System</span></div><div class="line"><span class="keyword">static</span> String <span class="title">getProperty</span><span class="params">(String key)</span></div><div class="line">Gets the system property indicated by the specified key.</div></pre></td></tr></table></figure>
<ul>
<li><p>上面两个说白了上面两个方法获得的是系统默认的字符集编码，所以我们一般获得的是GBK，因为我们大部分用的是中文版的window系统。。。。。</p>
</li>
<li><p>但是我们能不能改呢？肯定能！</p>
</li>
<li><p>eclipse上 右键工程–&gt;properties–&gt;Resource–&gt;textfileEncoding</p>
</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-1.png" alt="Eclipse Encoding Setting Page"></p>
<ul>
<li><p>看到这里的GBK了吧，也许你早就改过了，所以前面运行结果不是GBK。</p>
</li>
<li><p>试试改成utf-8，再运行程序。是不是发现运行结果变成utf-8了？</p>
</li>
<li><p>为了统一编码，这里我们通常设置成utf-8</p>
</li>
<li><p>IDEA上 File–&gt;Settings–&gt;File Encodings–&gt;Project Encoding</p>
</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-2.png" alt="IDEA Encoding Setting Page"></p>
<ul>
<li><p>我们改成iso8859-1试试</p>
</li>
<li><p>输出是不是变成了iso8859-1。为了统一编码我们还是改回utf-8吧。【如果你之前没有改过idea的编码，这个位置还有其它几个位置编码可能就是system default即GBK】</p>
</li>
<li><p>这样就完了？no,no,no!!</p>
</li>
<li><p>我们试着建立一个web项目，web容器采用tomcat</p>
</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-3.png" alt="IDEA Encoding Setting Page"></p>
<ul>
<li><p>好大的两个GBK…….【声明：IDEA上工程，文件的字符集编码已经设置成了UTF-8，所以不要怀疑是这个原因。】</p>
</li>
<li><p>那么，到底是什么原因呢？我们之前明明就是这样改的，而且成功了哎。</p>
</li>
<li><p>我只想说：可能web项目比较特殊吧，毕竟它运行的时候借助了web容器，比如这里我们使用的是tomcat容器。</p>
</li>
<li><p>那么我们该如何让其回归utf-8呢？</p>
</li>
<li><p>方法当然有，如下：来到tomcat配置界面：添加虚拟机启动参数：-Dfile.encoding=UTF-8</p>
</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-4.png" alt="JVM Encoding Setting Page"></p>
<ul>
<li>我们再来运行一遍：</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-5.png" alt="JVM Encoding Setting Page"></p>
<ul>
<li><p>utf-8出来了，有木有。</p>
</li>
<li><p>纳尼，控制台出现了鸟文？</p>
</li>
<li><p>我们继续对IDEA做点修改。</p>
</li>
<li><p>打开idea安装目录下的bin文件夹，找到idea.exe.vmoptions文件并打开</p>
</li>
<li><p>添加一条配置信息：-Dfile.encoding=UTF-8</p>
</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-6.png" alt="IDEA Encoding Setting Page"></p>
<ul>
<li>ok，重启idea，再次运行web项目</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javase-eclipse-idea-encoding-setting-7.png" alt="IDEA Encoding Setting Page"></p>
<ul>
<li>世界顿时又美好了。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Get请求，Post请求乱码问题解决方案]]></title>
      <url>https://bearsmall.github.io/2015/09/07/javaweb/2015-09-07-Get-Post-Encoding/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><strong>之所以出现乱码，主要是由于编码和解码采用的方法不同。</strong></li>
<li><strong>因此保证编码解码格式一致是避免乱码发生的重要前提。</strong><a id="more"></a>
<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2></li>
</ul>
<p>JavaWeb技术下，Tomcat作为容器，发送请求的时候出现乱码问题。</p>
<h2 id="两种常见方法"><a href="#两种常见方法" class="headerlink" title="两种常见方法"></a>两种常见方法</h2><h3 id="1-Post方式请求乱码"><a href="#1-Post方式请求乱码" class="headerlink" title="1.Post方式请求乱码"></a>1.Post方式请求乱码</h3><ul>
<li><p>自从Tomcat5.x以来，Get方式和Post方式提交的请求，tomcat会采用不同的方式来处理编码。<br>对于Post请求，Tomcat会使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">如果未设置，则默认都采用iso-8859-1编码。因此如果在发送Post请求的时候出现乱码，常见的解决方法如下：</div><div class="line">    * a)  ```request.setCharacterEncoding(&quot;utf-8&quot;);</div></pre></td></tr></table></figure></p>
<ul>
<li>b)  <figure class="highlight plain"><figcaption><span>name = new String(request.getParameter("name").getBytes("ISO-8859-1"), "UTF-8");```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- （当然response的编码也不要忘记设置成utf-8的）</div><div class="line">- 【注】：上面提供的是两种不同的方法，并不是一种方法的两个步骤！！！</div><div class="line"></div><div class="line">#### 我们可以看出来第一种方式写法固定，非常很适合通过写成过滤器的方式进行编码的统一转换。</div><div class="line"></div><div class="line">```java</div><div class="line">publicclass EncodingFilter extends HttpFilter &#123;</div><div class="line">    publicvoid doFilter(HttpServletRequest request,  HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">       Stringcharset = this.getInitParameter(&quot;charset&quot;);</div><div class="line">       if(charset == null ||charset.isEmpty()) &#123;</div><div class="line">           charset =&quot;UTF-8&quot;;</div><div class="line">       &#125;</div><div class="line">        request.setCharacterEncoding(charset);</div><div class="line">       response.setContentType(&quot;text/html;charset=&quot; + charset);</div><div class="line">       chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-Get方式请求乱码"><a href="#2-Get方式请求乱码" class="headerlink" title="2.Get方式请求乱码"></a>2.Get方式请求乱码</h3><ul>
<li><p>我们刚谈到Tomcat对Post请求的编码处理策略，并且从字里行间读出了Tomcat对Post和Get的编码策略有所不同，<br>那么Tomcat对Get请求的编码策略到底是如何不同的呢？答案就是Tomcat对于Get请求并不会考虑使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 言外之意就是我们无法通过```request.setCharacterEncoding```方式来改变编码，因为最终Tomcat会永远使用iso-8859-1进行编码（但是要注意一下，</div><div class="line">respon还是可以通过调用```response.setCharacterEncoding```方式进行编码的设置的），既然是这样的话下面这个方法还是勉强可行的</div><div class="line"></div><div class="line">    &gt;方法a）</div><div class="line"></div><div class="line">    * 步骤一：```response.setCharacterEncoding(&quot;UTF-8&quot;)</div></pre></td></tr></table></figure></p>
<ul>
<li>步骤二：<figure class="highlight plain"><figcaption><span>name = new String(request.getParameter("name").getBytes("ISO-8859-1"), "UTF-8");```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 通过这两步，可以看到我们的request的字符编码格式是默认的“iso-8859-1&quot; 我们的response字符编码是自己设置的”utf-8&quot;</div><div class="line">显然两个是不相容的，因此我们在获取请求参数的时候才进行了一下字符集的转换即步骤二：```String name=new String(request.getParameter(&quot;name&quot;).getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;)；</div></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>既然有a），那肯定还有b）咯？当然！而且方案b更加干净，利落，彻底。让我们一起看一下吧：</p>
<blockquote>
<p>方法b）</p>
</blockquote>
<ul>
<li><p>修改Tomcat安装目录下conf子目录下的<figure class="highlight plain"><figcaption><span>【注：记得先停掉服务器】</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">找到文件中类似这样的段落：```&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</div></pre></td></tr></table></figure></p>
</li>
<li><p>在里面加上这样一段：URIEncoding=”UTF-8” 即变成下面这段<figure class="highlight plain"><figcaption><span>connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443" URIEncoding="UTF-8"</span><a href="/>```">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">    * 最后重启Tomcat即可。</div><div class="line"></div><div class="line">- 对于Get请求编码的统一处理也可以写成过滤器的形式，只不过稍微有些复杂。</div><div class="line"></div><div class="line">#### EncodingRequest.Java</div><div class="line"></div><div class="line">```java</div><div class="line">public class EncodingRequest extends HttpServletRequestWrapper &#123;</div><div class="line">    private String charset;</div><div class="line">    public EncodingRequest(HttpServletRequest request, String charset) &#123;</div><div class="line">        super(request);</div><div class="line">        this.charset = charset;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getParameter(String name) &#123;</div><div class="line">        HttpServletRequest request = (HttpServletRequest) getRequest();</div><div class="line"></div><div class="line">        String method = request.getMethod();</div><div class="line">        if(method.equalsIgnoreCase(&quot;post&quot;)) &#123;</div><div class="line">            try &#123;</div><div class="line">                request.setCharacterEncoding(charset);</div><div class="line">            &#125; catch (UnsupportedEncodingException e) &#123;&#125;</div><div class="line">        &#125; else if(method.equalsIgnoreCase(&quot;get&quot;)) &#123;</div><div class="line">            String value = request.getParameter(name);</div><div class="line">            try &#123;</div><div class="line">                value = new String(name.getBytes(&quot;ISO-8859-1&quot;), charset);</div><div class="line">            &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            &#125;</div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line">        return request.getParameter(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</li>
</ul>
</li>
</ul>
<h4 id="EncodingFilter-java"><a href="#EncodingFilter-java" class="headerlink" title="EncodingFilter.java"></a>EncodingFilter.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, FilterChain chain)</div><div class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        String charset = <span class="keyword">this</span>.getInitParameter(<span class="string">"charset"</span>);</div><div class="line">        <span class="keyword">if</span>(charset == <span class="keyword">null</span> || charset.isEmpty()) &#123;</div><div class="line">            charset = <span class="string">"UTF-8"</span>;</div><div class="line">        &#125;</div><div class="line">        response.setCharacterEncoding(charset);</div><div class="line">        response.setContentType(<span class="string">"text/html;charset="</span> + charset);</div><div class="line">        EncodingRequest res = <span class="keyword">new</span> EncodingRequest(request, charset);</div><div class="line">        chain.doFilter(res, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>charset<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>【注】为了避免您的测试与我给的解决方案结果不符，请在项目编码格式为<code>utf-8</code>，jsp页面 <code>pageEncoding=&quot;utf-8&quot;</code>的环境下测试。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Struts返回Json格式数据]]></title>
      <url>https://bearsmall.github.io/2015/08/24/javaweb/2015-08-24-Struts2-return-json/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>我们知道json数据就是一堆键/值对的集合，更随意的可以就把它理解为符合特定规则字符串。那么我们怎么利用这个特殊的“字符串”来进行前后台的交互呢？</li>
<li>其实很简单，让你用字符串交互估计都会，用json也没有那么复杂。<a id="more"></a></li>
<li>简单的我们直接向页面输出：先获取到response（不要问我怎么获取，用你的奇技淫巧可以办到的）然后调用response.getWriter().write(String str)方法直接向调用者输出。</li>
<li>感觉是不是很无聊啊，就是输出个字符串而已嘛，不过既然是输出json格式的就麻烦把字符串弄成符合要求的json吧。你可以自己拼字符串，也可以用现成的工具类。</li>
<li>Java api就有现成的，不过有好多更加优秀的第三方jar包，为什么不试一试呢？来半张官网的图 :scream:，有兴趣的自行研究：</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-struts2-json-1.png" alt="Struts2 Json format"></p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="配置Action"><a href="#配置Action" class="headerlink" title="配置Action"></a>配置Action</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"adminManage"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"json-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"KAdminTest"</span> <span class="attr">class</span>=<span class="string">"com.know.control.action.AdminAction"</span></span></div><div class="line">        <span class="attr">method</span>=<span class="string">"queryAllUsers"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"json"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 这里指定将被Struts2序列化的属性，该属性在action中必须有对应的getter方法 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span>jsonResult<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 指定是否序列化值为空的属性 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeNullProperties"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="有几点值得注意："><a href="#有几点值得注意：" class="headerlink" title="有几点值得注意："></a>有几点值得注意：</h4><ul>
<li>不同于我们以往配置的Action（以往配置的Action所在的package都是extends=”struts-defualt”）<br>这里我们extends=”json-default”，这里需要引入特定的jar包：struts2-json-plugin-xxx.jar.来支持<br>有人可能会问了json-default哪来的？其实就是继承自struts-default打开struts2-json-plugin-xxx.jar.查看struts-default.xml文件就会发现这个：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"json-default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">       ........</div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>就是配置result的时候要指定type=”json”，如果想向前台传递参数则配置<figure class="highlight plain"><figcaption><span>name="root">jsonResult ``` ，这里的jsonResult必须在Action中有对应的get方法，</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jsonResult的类型不固定，因为最终由jsonResult到格式化的json是由struts2完成的，不需要我们做转换。</div><div class="line">当然还有其它更多的配置如下：</div><div class="line"></div><div class="line">```xml</div><div class="line">    &lt;param name=&quot;root&quot;&gt;jsonResult&lt;/param&gt;</div><div class="line">    &lt;!-- 指定是否序列化值为空的属性 --&gt;</div><div class="line">    &lt;param name=&quot;excludeNullProperties&quot;&gt;true&lt;/param&gt;</div><div class="line">    &lt;!-- 指定将序列化jsonResult中的哪些属性 --&gt;</div><div class="line">    &lt;param name=&quot;includeProperties&quot;&gt;userList.*&lt;/param&gt;</div><div class="line">    &lt;!-- 指定jsonResult中哪些属性将不被序列化，一般不与上边的配置同时出现 --&gt;</div><div class="line">    &lt;param name=&quot;excludeProperties&quot;&gt;SUCCESS&lt;/param&gt;</div></pre></td></tr></table></figure></li>
</ul>
<h3 id="编写Action"><a href="#编写Action" class="headerlink" title="编写Action"></a>编写Action</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; jsonResult;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getJsonResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jsonResult;</div><div class="line">    &#125;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UserService userProxy = (UserService) BeanFactory</div><div class="line">            .getBean(<span class="string">"UserProxy"</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAllUsers</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;UserModel&gt; userList = userProxy.transForm(userProxy.getUsers());</div><div class="line">        jsonResult = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        jsonResult.put(<span class="string">"total"</span>, userList.size());</div><div class="line">        jsonResult.put(<span class="string">"rows"</span>, userList);</div><div class="line">        jsonResult.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> SUCCESS;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>使用Map做jsonResult更符合json的格式。好了，其它的细节不展开了。</p>
</li>
<li><p>最后测试，下面是输出结果：</p>
</li>
</ul>
<p><img src="http://okv02t39e.bkt.clouddn.com/javaweb-struts2-json-2.png" alt="Struts2 Json format"></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul>
<li><p>一开始我在获取userList的时并没有做transForm操作，一切看似正确，但是当程序运行，访问URL的时候报了一个could not initialize proxy -no session 异常，当时很郁闷。<br>后来才发现是hibernate的懒加载捣的鬼。就是我的User和其他表有一对多的映射。看似userList查询成功，其实User的一些属性并没有值（这种”没有值“的状态和为null不太一样，当你访问这些属性的时候，它会再次查询一遍数据库（俗称懒加载）。<br>不过，要实现懒加载必须在同一个session中，但是由于我们访问这些属性的地方不对（我们在哪里访问这些属性了？），不在同一个session中，导致出错）</p>
</li>
<li><p>所以我重新做了一个UserModel来封装需要的数据。这样就不会被那些无辜牵连的数据折腾了。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax初体验之登录校验]]></title>
      <url>https://bearsmall.github.io/2015/07/27/javaweb/2015-07-27-Ajax-login-check/</url>
      <content type="html"><![CDATA[<h2 id="Ajax的关键"><a href="#Ajax的关键" class="headerlink" title="Ajax的关键"></a>Ajax的关键</h2><p>XMLHttpRequest对象</p>
<h2 id="期望的效果"><a href="#期望的效果" class="headerlink" title="期望的效果"></a>期望的效果</h2><p>有这样一个表单（类似注册）当用户输入用户名，且User name输入框失去焦点时，立即判断该用户输入的用户名是否合法：<br>如果用户名已经存在则给出类似下面的提示：达到较好的用户体验。【密码输入框有空的读者自行实践，这里不做过多描述】<br><a id="more"></a></p>
<h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">        User name：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span> = <span class="string">"name"</span> <span class="attr">onblur</span>=<span class="string">"checkUserName()"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"nameMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        PassWord：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span> = <span class="string">"password"</span> <span class="attr">onblur</span>=<span class="string">"checkPassword()"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"passMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//大多数浏览器</span></div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                <span class="keyword">try</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</div><div class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkUserName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xmlHttp = createXMLHttpRequest();</div><div class="line">            <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</div><div class="line">            xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(xmlHttp.readyState==<span class="number">4</span>&amp;&amp;xmlHttp.status==<span class="number">200</span>)&#123;</div><div class="line">                    <span class="keyword">var</span> name =  <span class="built_in">document</span>.getElementById(<span class="string">"nameMsg"</span>);</div><div class="line">                    name.innerHTML = xmlHttp.responseText;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            xmlHttp.open(<span class="string">"POST"</span>, <span class="string">"/AjaxDemo1/BServlet"</span>, <span class="literal">true</span>);</div><div class="line">            xmlHttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">            xmlHttp.send(<span class="string">"username="</span>+username);</div><div class="line">        &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>【注】简单说明一下，post请求必须设置 content-type的请求头为xmlHttp.setRequestHeader(“Content-type”, “application/x-www-form-urlencoded”);</li>
<li>其实这个就是表单ectype的默认值，等同于设置了content-type请求头，不过这里我们用的是Ajax的方式发送请求，这里没有默认值，需要我们自己指定。</li>
<li><p>这里用到了XMLHttpRequest对象的onreadystatechange事件，该事件会在XMLHttpRequest对象的状态变化的时候触发，上网搜一搜XMLHttpRequest对象有五种状态：</p>
<ul>
<li>0：仅仅创建了XMLHttpRequest对象，还未调用open()方法，【初始化未完成状态】</li>
<li>1：open()方法已经调用，但是还没有调用send()方法，【请求已经开始】</li>
<li>2：send()方法已经调用，【请求发送完成】</li>
<li>3：开始收到服务器的响应。</li>
<li>4：服务器响应完毕。</li>
</ul>
</li>
</ul>
<ul>
<li>也就是说onreadystatechange会在,0–&gt;1，1–&gt;2，2–&gt;3，3–&gt;4的时候触发。</li>
<li>如果我们不做一些处理的话，很显然onreadystatechange会被触发四次。所以加了这个判断：if(xmlHttp.readyState==4&amp;&amp;xmlHttp.status==200)，我们还关心服务器返回的状态码是否是200。</li>
<li>然后我们可以猜到：xmlHttp.responseText是从后台传递过来的数据，没错就是这样。</li>
<li>这里我们是这样传递参数给后台的：xmlHttp.send(“username=”+username);</li>
<li>后台就可以这样取到传递过来的数据：String username = request.getParameter(“username”);</li>
</ul>
<h3 id="BServlet"><a href="#BServlet" class="headerlink" title="BServlet"></a>BServlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">response.setContentType(<span class="string">"text/html"</span>);</div><div class="line">PrintWriter out = response.getWriter();</div><div class="line"></div><div class="line">String username = request.getParameter(<span class="string">"username"</span>);</div><div class="line"><span class="keyword">boolean</span> flag = <span class="keyword">new</span> DBHelper().searchByName(username);<span class="comment">//判断用户是否已经存在</span></div><div class="line">String msg = flag==<span class="keyword">true</span>?<span class="string">"User Already exists!"</span>:<span class="string">""</span>;</div><div class="line"></div><div class="line">out.print(msg);</div></pre></td></tr></table></figure>
<p>out.print中的msg为后台与Ajax交互后最后传递过去的数据，与xmlHttp.responseText;对应。<br> 中间就是封装的jdbc的操作了。</p>
<h3 id="jdbc代码"><a href="#jdbc代码" class="headerlink" title="jdbc代码"></a>jdbc代码</h3><h4 id="DBHelper"><a href="#DBHelper" class="headerlink" title="DBHelper"></a>DBHelper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchByName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line">        String sql = <span class="string">"select * from user where name=?"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            conn = DBUtils.getConnection();</div><div class="line">            ps = conn.prepareStatement(sql);</div><div class="line">            ps.setString(<span class="number">1</span>, name);</div><div class="line">            rs = ps.executeQuery();</div><div class="line">            <span class="keyword">if</span> (rs.next()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            DBUtils.close(conn, ps, rs);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql:///test"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="string">"root"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"123"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class.forName(driver);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**获取数据库连接对象</span></div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            conn = DriverManager.getConnection(url,username,password);</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> conn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**关闭数据库连接资源</span></div><div class="line">     * <span class="doctag">@param</span> con</div><div class="line">     * <span class="doctag">@param</span> ps</div><div class="line">     * <span class="doctag">@param</span> rs</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection con,PreparedStatement ps,ResultSet rs)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                rs.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ps.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(con!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                con.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数据库中的user表如下："><a href="#数据库中的user表如下：" class="headerlink" title="数据库中的user表如下："></a>数据库中的user表如下：</h4><p>就加了两条数据。</p>
<h4 id="效果图再来一张"><a href="#效果图再来一张" class="headerlink" title="效果图再来一张"></a>效果图再来一张</h4><p>图被狗吃了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从一个“变态”的题看“分析Java源代码”的重要性！]]></title>
      <url>https://bearsmall.github.io/2015/07/24/javase/2015-07-24-java-src-important/</url>
      <content type="html"><![CDATA[<h2 id="题引"><a href="#题引" class="headerlink" title="题引"></a>题引</h2><ul>
<li><p>看代码写运行结果</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerAndInt</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Integer i1 = <span class="number">100</span>;</div><div class="line">        Integer i2 = <span class="number">100</span>;</div><div class="line">        Integer i3 = <span class="number">200</span>;</div><div class="line">        Integer i4 = <span class="number">200</span>;</div><div class="line"></div><div class="line">        System.out.println(i1==i2);</div><div class="line">        System.out.println(i3==i4);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行结果是什么呢？（可以事先思考一下再看答案）</p>
</li>
<li><p>-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！-thingking！！</p>
</li>
<li><p>运行结果揭晓：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">false</div></pre></td></tr></table></figure>
<ul>
<li>——————-不相信？不信可以自己试一试</li>
<li>coding…….</li>
<li>——————-Oh My God!   but why?</li>
</ul>
<h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>涉及到Java中Integer与int之间的自动拆装箱知识点</p>
<h3 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h3><ul>
<li><p>自动拆装箱指的是：8种基本类型与其对应包装器类型可以直接互换 注意：基本类型的数组，与其包装器类型的数组不可互换<br>自动拆装箱由编译器（不是虚拟机）完成的，编译器帮我们完成拆箱和装箱操作 Add：可以用反编译看看编译器到底为我们做了什么</p>
<ol>
<li>装箱：把int类型赋值给Integer类型时（Integer = int），int类型的变量的值会自动装箱成Integer类型，然后赋给Integer类型的引用，这里底层就是通过调用valueOf()这个方法来实现的。</li>
<li>拆箱：把Integer类型赋值给int类型时（int = Integer），Integer类型的变量的值会自动拆箱成int类型，然后赋给int类型的变量，这里底层则是通过调用intValue()方法来实现的。</li>
</ol>
</li>
</ul>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul>
<li>下面给出Integer的valueOf函数源代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>IntegerCache是Integer的静态内部类cache是IntegerCathed的成员： static final Integer cache[];（注意关键字 static final Integer）<br>caChe里面装的值是【-128,127】之间的Integer，这里我截取一部分来自IntegerCache的静态代码块的代码以便更清楚的认识：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> j = low;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">     cache[k] = <span class="keyword">new</span> Integer(j++);</div></pre></td></tr></table></figure>
<ul>
<li>说明：high的值是127，low的值是-128 （两个都是IntegerCache的成员变量，都是static final int类型）<br>这样一来，就相当于-128到127之间的Integer已经存在了。后面不论你有多少个Integer = int类型的装箱操作，如果int的值始终在-128到127之间，那么得到的Integer对象始终是指向事先就已经确定好的这些区域。其中如果有些int的值相等，那么这些int所对应的Integer对象就指向同一块区域，这也就是为什么上面的“i1==i2”得到的是true的缘故了。至于”i1==i2”为什么是false，相信大家都知道：由于【+128,127】满足不了所有的需求，必须重新开辟了一块内存空间用于存放“越界”的Integer。因为200不在【-128,127】内，而两次开辟的内存空间位置不同，所以”i1==i2”是false。<ol>
<li><integer及其内部类integercache具体内容请参看源码></integer及其内部类integercache具体内容请参看源码></li>
<li>【注：*Java设计模式之享元模式的体现】</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java反射]]></title>
      <url>https://bearsmall.github.io/2015/07/23/javase/2015-07-23-java-Reflection/</url>
      <content type="html"><![CDATA[<h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>小问题还是直接上代码比较直观</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li><p>Parent类（父类）</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xiongyu.reflect;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Parent:method1"</span>);</div><div class="line">        <span class="keyword">this</span>.method2();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Parent:method2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Children类（Parent类的子类）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xiongyu.reflect;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Children:mehtod1"</span>);</div><div class="line">        <span class="keyword">super</span>.method1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Children:method2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Children:method3"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xiongyu.reflect;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Parent p = <span class="keyword">new</span> Children();</div><div class="line">        p.method1();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面是打印输出的结果：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Children:mehtod1</div><div class="line">Parent:method1</div><div class="line">Children:method2</div></pre></td></tr></table></figure>
<ul>
<li>这能说明什么？表示我对此并不感到很惊讶！！【注：对此表示惊讶的同学得回去看看Java基础了】</li>
<li>别急，好戏开始了，现在我对输出有点不满，我要下面这个！</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Children:mehtod1</div><div class="line">Parent:method1</div><div class="line">Children:method3</div></pre></td></tr></table></figure>
<ul>
<li>【注：简单说就是在执行Parent类的method1后回来执行Children类的method3方法，怎么办？】</li>
</ul>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul>
<li>重写Parent类的method1方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Parent:method1"</span>);</div><div class="line">        <span class="keyword">this</span>.method3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>纳里，编译都过不了。。。。。。</li>
<li>编译过不了是必然的，因为这里只能调用在父类中声明的方法：method1()和method2()，而method3()是子类特有的，父类里面“看不到”，所以这里会编译出错！</li>
<li>但是，我们发现一个问题，程序运行起来后，这里的this明明就是子类对象啊！这可真是干着急啊，到嘴的肥肉竟然不能吃。办法当然是有的，现在进入正题。</li>
<li>既然问题的关键已经找到了，就是这个this搞的鬼。我们直接上代码。</li>
</ul>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul>
<li>重写父类的method1方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Parent:method1"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Method method = <span class="keyword">this</span>.getClass().getDeclaredMethod(<span class="string">"method3"</span>, <span class="keyword">null</span>);</div><div class="line">        method.invoke(<span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>下面是打印输出的结果：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Children:mehtod1</div><div class="line">Parent:method1</div><div class="line">Children:method3</div></pre></td></tr></table></figure>
<ul>
<li>正题结束，这回真的就是指哪打哪了，加了几行代码就搞定了，收工。</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
